{"meta":{"version":1,"warehouse":"5.0.1"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","path":"fancybox/jquery.fancybox.min.css","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","path":"fancybox/jquery.fancybox.min.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.6.4.min.js","path":"js/jquery-3.6.4.min.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","path":"js/script.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":1,"renderable":1},{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/css/noscript.styl","path":"css/noscript.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo-algolia-nebula-blue-full.svg","path":"images/logo-algolia-nebula-blue-full.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/comments-buttons.js","path":"js/comments-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/comments.js","path":"js/comments.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/config.js","path":"js/config.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/pjax.js","path":"js/pjax.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schedule.js","path":"js/schedule.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/addtoany.js","path":"js/third-party/addtoany.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/fancybox.js","path":"js/third-party/fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/pace.js","path":"js/third-party/pace.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/quicklink.js","path":"js/third-party/quicklink.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/analytics/baidu-analytics.js","path":"js/third-party/analytics/baidu-analytics.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/analytics/google-analytics.js","path":"js/third-party/analytics/google-analytics.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/analytics/growingio.js","path":"js/third-party/analytics/growingio.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/analytics/matomo.js","path":"js/third-party/analytics/matomo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/chat/chatra.js","path":"js/third-party/chat/chatra.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/chat/tidio.js","path":"js/third-party/chat/tidio.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/changyan.js","path":"js/third-party/comments/changyan.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/disqus.js","path":"js/third-party/comments/disqus.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/disqusjs.js","path":"js/third-party/comments/disqusjs.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/gitalk.js","path":"js/third-party/comments/gitalk.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/isso.js","path":"js/third-party/comments/isso.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/livere.js","path":"js/third-party/comments/livere.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/utterances.js","path":"js/third-party/comments/utterances.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/math/katex.js","path":"js/third-party/math/katex.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/math/mathjax.js","path":"js/third-party/math/mathjax.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/search/algolia-search.js","path":"js/third-party/search/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/search/local-search.js","path":"js/third-party/search/local-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/statistics/firestore.js","path":"js/third-party/statistics/firestore.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/statistics/lean-analytics.js","path":"js/third-party/statistics/lean-analytics.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/tags/mermaid.js","path":"js/third-party/tags/mermaid.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/tags/pdf.js","path":"js/third-party/tags/pdf.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/tags/wavedrom.js","path":"js/third-party/tags/wavedrom.js","modified":1,"renderable":1}],"Cache":[{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1736215188874},{"_id":"node_modules/hexo-theme-landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1736215206096},{"_id":"node_modules/hexo-theme-landscape/README.md","hash":"1a9b279e6dd29fd19245f913f0c4a316ffaa62db","modified":1736215209137},{"_id":"node_modules/hexo-theme-landscape/_config.yml","hash":"b608c1f1322760dce9805285a602a95832730a2e","modified":1736215209141},{"_id":"node_modules/hexo-theme-landscape/package.json","hash":"4bf95d52f77edf811f23f6d264a7493311a8d078","modified":1736215209136},{"_id":"node_modules/hexo-theme-landscape/languages/de-DE.yml","hash":"d29d1c4256b7ed9df42f511c2ff0a23ad5fd6c1f","modified":1736215209141},{"_id":"node_modules/hexo-theme-landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1736215209141},{"_id":"node_modules/hexo-theme-landscape/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1736215209141},{"_id":"node_modules/hexo-theme-landscape/languages/en-GB.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1736215209141},{"_id":"node_modules/hexo-theme-landscape/languages/en-US.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1736215209141},{"_id":"node_modules/hexo-theme-landscape/languages/en.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1736215209141},{"_id":"node_modules/hexo-theme-landscape/languages/es-ES.yml","hash":"7008a8fc91f18d2a735864817b8ebda30c7a2c66","modified":1736215209141},{"_id":"node_modules/hexo-theme-landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1736215209142},{"_id":"node_modules/hexo-theme-landscape/languages/fr-FR.yml","hash":"8d09dbdab00a30a2870b56f7c0a7ca7deafa7b88","modified":1736215209142},{"_id":"node_modules/hexo-theme-landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1736215209142},{"_id":"node_modules/hexo-theme-landscape/languages/hu-HU.yml","hash":"712d18664898fa21ba38d4973e90ef41a324ea25","modified":1736215209142},{"_id":"node_modules/hexo-theme-landscape/languages/hu.yml","hash":"284d557130bf54a74e7dcef9d42096130e4d9550","modified":1736215209142},{"_id":"node_modules/hexo-theme-landscape/languages/it-IT.yml","hash":"2cb6dc2fab9bd2dbe1c8bb869a9e8bf85a564fdd","modified":1736215209142},{"_id":"node_modules/hexo-theme-landscape/languages/it.yml","hash":"89b7d91306b2c1a0f3ac023b657bf974f798a1e8","modified":1736215209142},{"_id":"node_modules/hexo-theme-landscape/languages/ja-JP.yml","hash":"08481267e0c112e1f6855620f2837ec4c4a98bbd","modified":1736215209142},{"_id":"node_modules/hexo-theme-landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1736215209142},{"_id":"node_modules/hexo-theme-landscape/languages/ko-KR.yml","hash":"19209ad8f9d4057e8df808937f950eb265e1db69","modified":1736215209142},{"_id":"node_modules/hexo-theme-landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1736215209142},{"_id":"node_modules/hexo-theme-landscape/languages/mn-MN.yml","hash":"b9e5f3e7c0c2f779cf2cfded6db847b5941637ca","modified":1736215209142},{"_id":"node_modules/hexo-theme-landscape/languages/mn.yml","hash":"2e7523951072a9403ead3840ad823edd1084c116","modified":1736215209142},{"_id":"node_modules/hexo-theme-landscape/languages/nl-NL.yml","hash":"5ebbc30021f05d99938f96dfff280392df7f91f0","modified":1736215209143},{"_id":"node_modules/hexo-theme-landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1736215209143},{"_id":"node_modules/hexo-theme-landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1736215209143},{"_id":"node_modules/hexo-theme-landscape/languages/pt-PT.yml","hash":"0f852b6b228e6ea59aa3540574bb89b233f2a098","modified":1736215209143},{"_id":"node_modules/hexo-theme-landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1736215209143},{"_id":"node_modules/hexo-theme-landscape/languages/ru-RU.yml","hash":"360d11a28bb768afb1dd15f63fa7fd3a8cc547ee","modified":1736215209143},{"_id":"node_modules/hexo-theme-landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1736215209143},{"_id":"node_modules/hexo-theme-landscape/languages/th-TH.yml","hash":"ebfdba9bc4842c829473c1e6e4544344f182724d","modified":1736215209143},{"_id":"node_modules/hexo-theme-landscape/languages/th.yml","hash":"84a55b00aa01f03982be294e43c33a20e6d32862","modified":1736215209143},{"_id":"node_modules/hexo-theme-landscape/languages/tr.yml","hash":"a1cdbfa17682d7a971de8ab8588bf57c74224b5b","modified":1736215209143},{"_id":"node_modules/hexo-theme-landscape/languages/zh-CN.yml","hash":"1efd95774f401c80193eac6ee3f1794bfe93dc5a","modified":1736215209143},{"_id":"node_modules/hexo-theme-landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1736215209144},{"_id":"node_modules/hexo-theme-landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1736215206247},{"_id":"node_modules/hexo-theme-landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1736215206247},{"_id":"node_modules/hexo-theme-landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1736215206248},{"_id":"node_modules/hexo-theme-landscape/layout/layout.ejs","hash":"0d1765036e4874500e68256fedb7470e96eeb6ee","modified":1736215206248},{"_id":"node_modules/hexo-theme-landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1736215206248},{"_id":"node_modules/hexo-theme-landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1736215206248},{"_id":"node_modules/hexo-theme-landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1736215206249},{"_id":"node_modules/hexo-theme-landscape/scripts/fancybox.js","hash":"c857d7a5e4a5d71c743a009c5932bf84229db428","modified":1736215208601},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/after-footer.ejs","hash":"377d257d5d16e0158a4405c72401517b074fd7ff","modified":1736215206245},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1736215206245},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive.ejs","hash":"7cb70a7a54f8c7ae49b10d1f37c0a9b74eab8826","modified":1736215206246},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/article.ejs","hash":"56597e951203dd662a6d2c817c7c4f1c920d4a25","modified":1736215206247},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/footer.ejs","hash":"3656eb692254346671abc03cb3ba1459829e0dce","modified":1736215206248},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/gauges-analytics.ejs","hash":"21a1e2a3907d1a3dad1cd0ab855fe6735f233c74","modified":1736215206248},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/google-analytics.ejs","hash":"2ea7442ea1e1a8ab4e41e26c563f58413b59a3d0","modified":1736215206248},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/head.ejs","hash":"f05bced793b0314d4f2ef0c993b3a51d0b7d203a","modified":1736215206248},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/header.ejs","hash":"6a5033d189554c9a6d42e2ef7952ae5c9742648e","modified":1736215206248},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1736215206248},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1736215206248},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1736215206246},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1736215206247},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/recent_posts.ejs","hash":"60c4b012dcc656438ff59997e60367e5a21ab746","modified":1736215206248},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1736215206248},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1736215206249},{"_id":"node_modules/hexo-theme-landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1736215209138},{"_id":"node_modules/hexo-theme-landscape/source/css/_variables.styl","hash":"ca28281423ae57d76b6c1eb91cd845fd4e518bd6","modified":1736215209138},{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","hash":"e55a1d92954ed20f6887f92dc727bb995a010a43","modified":1736215209141},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1736215206244},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","hash":"49773efcb2221bbdf2d86f3f5c5ff2d841b528cc","modified":1736215209136},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1736215206247},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/date.ejs","hash":"f1458584b679545830b75bef2526e2f3eb931045","modified":1736215206248},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1736215206248},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1736215206248},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1736215206248},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/title.ejs","hash":"4d7e62574ddf46de9b41605fe3140d77b5ddb26d","modified":1736215206249},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1736215209140},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1736215209140},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1736215209139},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/article.styl","hash":"2d1f6f79ebf9cb55ebdb3865a2474437eb2b37c6","modified":1736215209139},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1736215209139},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1736215209140},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/header.styl","hash":"268d2989acb06e2ddd06cc36a6918c6cd865476b","modified":1736215209140},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/highlight.styl","hash":"9cc3b2927d814f2f6e8e188f9d3657b94f4c6ef3","modified":1736215209140},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1736215209140},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1736215209140},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1736215209141},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1736215209141},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1736215209134},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.6.4.min.js","hash":"eda46747c71d38a880bee44f9a439c3858bb8f99","modified":1736215208871},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1736215208601},{"_id":"source/CNAME","hash":"e9c01d25388262ace35f1e19b25f79ffe981eea9","modified":1736216956062},{"_id":"source/_posts/shu-zu-shi-fou-cun-zai-jiao-ji-de-xing-neng-you-hua-wen-ti-z1kwfix.md","hash":"e4e9cf8528d1057e7f1ac72c299abb7a8c9901f0","modified":1736219750046},{"_id":"source/_posts/research-on-array-iteration-methods-hev8j.md","hash":"3c7e4b30f319877dd65b17970ef63bb0b0d95dba","modified":1736219750046},{"_id":"source/_posts/some-explorations-about-the-order-of-object-in-javascript-z1s1tng.md","hash":"e9ed5a6d4fa4b367ec4ae5bfe70e143aa75290a6","modified":1736219750046},{"_id":"source/_posts/talk-about-the-calculation-rules-of-the-priority-of-css-selector-priority-z2qeyfl.md","hash":"32cd1389febe5f72fa2b7a969403cc69d6789749","modified":1736219750046},{"_id":"themes/next/.gitattributes","hash":"ec43734985e1cafd53d88ded3020103f7416123c","modified":1693280910000},{"_id":"themes/next/.stylelintrc","hash":"9346cca6a24256a79f433670da634e8329f9a2a9","modified":1693280910000},{"_id":"themes/next/.gitignore","hash":"417520c4dbbeab9c7e3ab10d944da0886366a0ee","modified":1693280910000},{"_id":"themes/next/LICENSE.md","hash":"68fc9a03d50fd4b5ea97092b05967d1819dea2c4","modified":1693280910000},{"_id":"themes/next/.eslintrc.json","hash":"9c0762486f24a8c5e60f8b6c875e4c4728942649","modified":1693280910000},{"_id":"themes/next/_vendors.yml","hash":"918ac38c4c970c7ceb7973f4473accde2209f933","modified":1693280910000},{"_id":"themes/next/_config.yml","hash":"96a85e931e1b9824a70fcd799b42e4b2bf689d4f","modified":1736220626077},{"_id":"themes/next/package.json","hash":"c7f27b775f080fc753d1c99a20dd1655af7bc041","modified":1693280910000},{"_id":"themes/next/README.md","hash":"7dfee02792f98c73ff0da7e8efc9a7c55ef52fa0","modified":1693280910000},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1693280910000},{"_id":"themes/next/.githooks/install.js","hash":"0977cb57c8b91ea166b5bbc481e4ddeaf77e9b18","modified":1693280910000},{"_id":"themes/next/renovate.json","hash":"cb29cc16e61b0b8a6dac34657d76822ae29ad5aa","modified":1693280910000},{"_id":"themes/next/.githooks/pre-commit","hash":"f473eac1aaaa96c947d67988bbed140bbab1a821","modified":1693280910000},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"e78ec4eb6ce49a44ec321c49424ee0a0c1846537","modified":1693280910000},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"fa76760856429b6421abc54e63b2d3c815372900","modified":1693280910000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"330656d93b6c03df9fb1f2f0e3534c971969473b","modified":1693280910000},{"_id":"themes/next/.github/issue_label_bot.yaml","hash":"fca600ddef6f80c5e61aeed21722d191e5606e5b","modified":1693280910000},{"_id":"themes/next/.github/labeler.yml","hash":"5c4bc2bd561e6d9b33ee118cc12218c5de46f72d","modified":1693280910000},{"_id":"themes/next/.github/label-commenter-config.yml","hash":"5fd78aaaf3e6bb4811abde0cc5d75a3174ce4882","modified":1693280910000},{"_id":"themes/next/.github/config.yml","hash":"7984e665e9de481a0e0e51fca5668337713f810b","modified":1693280910000},{"_id":"themes/next/.github/release.yml","hash":"112310b81f959747f8eaafc2ca2150e1dcf916d8","modified":1693280910000},{"_id":"themes/next/layout/_layout.njk","hash":"fc0a45112f2dcfc2642404e8934ea32a793c3bd7","modified":1693280910000},{"_id":"themes/next/layout/archive.njk","hash":"d759f4d2cf5ddc6875ea250113a00662c1caf6d1","modified":1693280910000},{"_id":"themes/next/layout/category.njk","hash":"c68b7343d0f8145010f93351908cc36ef6212ec1","modified":1693280910000},{"_id":"themes/next/layout/index.njk","hash":"dd63e488ae8cc144335a5958acedf6a16edd7a92","modified":1693280910000},{"_id":"themes/next/layout/page.njk","hash":"b0660b2af0ac7d3fda14ca4d9f2c9e79ef06c6f9","modified":1693280910000},{"_id":"themes/next/layout/post.njk","hash":"0bfce9f133f501a9a4837257e3b862b3bbca15be","modified":1693280910000},{"_id":"themes/next/layout/tag.njk","hash":"9e16ba20c28a7f2c6bc75aa427f48122301a30aa","modified":1693280910000},{"_id":"themes/next/languages/README.md","hash":"b2567e32805dda79601157351a07e5ca9fe01315","modified":1693280910000},{"_id":"themes/next/languages/ar.yml","hash":"7d0f39e8684284a04bb9808521c87fecda8bd131","modified":1693280910000},{"_id":"themes/next/languages/bn.yml","hash":"9f791494afa263c3e31f14b8a5fa2996dfc834c0","modified":1693280910000},{"_id":"themes/next/languages/de.yml","hash":"79b37df731c29665dee6cd7c90d278e1edfb6e24","modified":1693280910000},{"_id":"themes/next/languages/default.yml","hash":"ba0fd79a2b1d8db01a034180556061745965ff05","modified":1693280910000},{"_id":"themes/next/languages/en.yml","hash":"ba0fd79a2b1d8db01a034180556061745965ff05","modified":1693280910000},{"_id":"themes/next/languages/eo.yml","hash":"e34bb33ae827bf2f0727088599a73bc64bdad1b0","modified":1693280910000},{"_id":"themes/next/languages/es.yml","hash":"dffc63ef42e1266b88e0acf08994fd17a9908d53","modified":1693280910000},{"_id":"themes/next/languages/fa.yml","hash":"f3ffc444599f4ac92d62e9ed00a1490ebc277d70","modified":1693280910000},{"_id":"themes/next/languages/fr.yml","hash":"44cd26479f503751329f6da2ed80cce1bbf18117","modified":1693280910000},{"_id":"themes/next/languages/id.yml","hash":"929df147f4f17d638b07de5fe52ca13e2549ab1c","modified":1693280910000},{"_id":"themes/next/docs/AUTHORS.md","hash":"a648823121563c34a177ae91f5a774b5e29f01a0","modified":1693280910000},{"_id":"themes/next/languages/it.yml","hash":"16d716ecfd748def2f6486ef5a82d0ab7ceb4890","modified":1693280910000},{"_id":"themes/next/languages/ja.yml","hash":"543222bfc516aab6c33e8534f807972ecb8943a9","modified":1693280910000},{"_id":"themes/next/languages/ko.yml","hash":"d345a303310c8a5f4836c3683f3580f861ebd1b4","modified":1693280910000},{"_id":"themes/next/languages/nl.yml","hash":"3cb3687696635ec71b4ca40c5fc43b56acc8843e","modified":1693280910000},{"_id":"themes/next/languages/pt-BR.yml","hash":"76b8576ce228d540a16b1f0af5af2cce20923194","modified":1693280910000},{"_id":"themes/next/languages/pt.yml","hash":"70de366e10ea584ba039d40d6b35ac97f93454ad","modified":1693280910000},{"_id":"themes/next/languages/ru.yml","hash":"c6d8de0ff7d8148d09993257cfd3b7aca755696c","modified":1693280910000},{"_id":"themes/next/languages/si.yml","hash":"2d712eedf3f60d04d36c3108cf5a12e2a52e875c","modified":1693280910000},{"_id":"themes/next/languages/th.yml","hash":"6829e998b39f8f143e20b276bb1f62d95a29de58","modified":1693280910000},{"_id":"themes/next/languages/tk.yml","hash":"511726054873f6f8d7ce0d2e803f6731de0ddbe7","modified":1693280910000},{"_id":"themes/next/languages/tr.yml","hash":"a57e4ed089b893a95f5e1ecff17ce625165f4d46","modified":1693280910000},{"_id":"themes/next/languages/vi.yml","hash":"7ebcba5e1128784195e4681dffc9d34c4e873fec","modified":1693280910000},{"_id":"themes/next/languages/uk.yml","hash":"ff537047b4b4c3ca9a7b64fa7f428a9942751eeb","modified":1693280910000},{"_id":"themes/next/languages/zh-CN.yml","hash":"741d7efe0262c9cdc2c648014b55599665d90f6b","modified":1693280910000},{"_id":"themes/next/languages/zh-HK.yml","hash":"88ea50eeb9097ab4a87a44981a102d8594feb064","modified":1693280910000},{"_id":"themes/next/languages/zh-TW.yml","hash":"4695c87d6b81b3a23d16ad6513d9eaa925f8d8ad","modified":1693280910000},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1693280910000},{"_id":"themes/next/.github/ISSUE_TEMPLATE/config.yml","hash":"c40ae7903b6cc99f94c9d45ac7ba8c2850bb1309","modified":1693280910000},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.yml","hash":"3f19cbf0c2b2fee6bf3788870b842c9ccc1425ca","modified":1693280910000},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.yml","hash":"fbc3062cd4591c8329fab9db72803746f0d11920","modified":1693280910000},{"_id":"themes/next/docs/LICENSE.txt","hash":"f5b14f791b7cfa1d16da981d929152e088a5d1b8","modified":1693280910000},{"_id":"themes/next/.github/ISSUE_TEMPLATE/other.yml","hash":"10eca518b91a19984f6a5a912d41222042f61d63","modified":1693280910000},{"_id":"themes/next/.github/workflows/label-commenter.yml","hash":"7ec04b4b70ea28f88495c5562bd9ea15528d36b5","modified":1693280910000},{"_id":"themes/next/.github/workflows/codeql.yml","hash":"8da13d7c325addb6b7c1d9ac3683dafd43e3709a","modified":1693280910000},{"_id":"themes/next/.github/workflows/labeler.yml","hash":"ee2292c5a9d99f06b62f9cc80e88068e6756982c","modified":1693280910000},{"_id":"themes/next/.github/workflows/linter.yml","hash":"2ab8720e4b9534e48ba324b73b0b58cb54df689f","modified":1693280910000},{"_id":"themes/next/.github/workflows/lock.yml","hash":"f1bf7f86c11419b63323bd21e388e6bdaf24d27d","modified":1693280910000},{"_id":"themes/next/.github/workflows/tester.yml","hash":"80a20c3a7522249f051a48239db41d1317e9b552","modified":1693280910000},{"_id":"themes/next/docs/ru/README.md","hash":"ca3088a27b9890402ffb18c4b6c4bedaff8d575b","modified":1693280910000},{"_id":"themes/next/layout/_macro/post-collapse.njk","hash":"abda600685ee972e1f6b7a2dcc56f13e2daa6263","modified":1693280910000},{"_id":"themes/next/layout/_macro/post.njk","hash":"65e9112fb7eb26d2880db624554a99aca028140b","modified":1693280910000},{"_id":"themes/next/layout/_macro/sidebar.njk","hash":"547c62ab14d9e05d2d9116db9048a677fbe1fb6d","modified":1693280910000},{"_id":"themes/next/layout/_partials/comments.njk","hash":"d0c470b0f6690aa217e9ada848c5e2e73fb27c6f","modified":1693280910000},{"_id":"themes/next/layout/_partials/footer.njk","hash":"6fca18ed4234cf54146c2b3b97b0a6a3606ab33d","modified":1693280910000},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"12a6631617695504d5cf2a94b57d87bd331bef6f","modified":1693280910000},{"_id":"themes/next/layout/_partials/languages.njk","hash":"e43f22198cccb5f6e306b1ce0d28d12a4fb891f8","modified":1693280910000},{"_id":"themes/next/layout/_partials/pagination.njk","hash":"bc719473ed5948ab6859449d60b8d36cfc1542b4","modified":1693280910000},{"_id":"themes/next/layout/_scripts/index.njk","hash":"6668878a0f9a1166c6a879755f54a08d942da870","modified":1693280910000},{"_id":"themes/next/layout/_scripts/vendors.njk","hash":"be80b9fe415a9a09d74c28e230995fd292dfc123","modified":1693280910000},{"_id":"themes/next/layout/_partials/widgets.njk","hash":"e7f988ecddb2159313699a00827a45eca5622bd4","modified":1693280910000},{"_id":"themes/next/layout/_third-party/addtoany.njk","hash":"ef64c6bfb8540cd874701236b9be47db2496e98e","modified":1693280910000},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"a089f7a8368ab0b7d7b9b7ec0ac3767a453435df","modified":1693280910000},{"_id":"themes/next/layout/_third-party/fancybox.njk","hash":"844559f46e2ff1c8be234d5763703106e2072a7b","modified":1693280910000},{"_id":"themes/next/layout/_third-party/index.njk","hash":"dfd7cdd6ba89f8c3deabc27726c7a350cadafd11","modified":1693280910000},{"_id":"themes/next/docs/zh-CN/README.md","hash":"8ae85453051faa7ed3b332ee488ff5eea8ddaa08","modified":1693280910000},{"_id":"themes/next/layout/_third-party/pace.njk","hash":"d7ad5714079f7f65446f880baf14722435ca9061","modified":1693280910000},{"_id":"themes/next/layout/_third-party/quicklink.njk","hash":"0efed71ed530447718c4ea5bbd5fc8695b0b0d5f","modified":1693280910000},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"872f01cb10e422a648ea505436532e776e92926b","modified":1693280910000},{"_id":"themes/next/scripts/filters/post.js","hash":"fdc8a0af90035e89c3fcb754a0eb189b8951a2bc","modified":1693280910000},{"_id":"themes/next/scripts/filters/locals.js","hash":"9eb5310664759931287dd28ea39165dfb67f12ed","modified":1693280910000},{"_id":"themes/next/scripts/events/index.js","hash":"bd9ea82376cd87df611ea3ae077875c7c595a3df","modified":1693280910000},{"_id":"themes/next/scripts/filters/minify.js","hash":"447db39d17775b2bd18d8af9c9d65b7b8449f751","modified":1693280910000},{"_id":"themes/next/scripts/helpers/engine.js","hash":"d292b78485e8e8055712b0ed6de7cf559c5fbdcd","modified":1693280910000},{"_id":"themes/next/scripts/helpers/font.js","hash":"3394185a7f0393c16ce52c8028f90da3e9239c55","modified":1693280910000},{"_id":"themes/next/scripts/helpers/navigation.js","hash":"78107021101553c3d23e89290f7530b60cf4aa86","modified":1693280910000},{"_id":"themes/next/scripts/helpers/next-paginator.js","hash":"e86c764b546e4fbb87970cabc4135a56f9ef9fe1","modified":1693280910000},{"_id":"themes/next/scripts/helpers/next-vendors.js","hash":"957241c28796ff352de7f4cffba7bb289b043586","modified":1693280910000},{"_id":"themes/next/scripts/tags/button.js","hash":"c6ad2ed544fbb25ecb5d820c36e76302504271b7","modified":1693280910000},{"_id":"themes/next/scripts/helpers/next-config.js","hash":"226fccbe9c93265e65a300e3cb4bf6f9065cfdd7","modified":1693280910000},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"6281d47c1de98eb38f3aa0f6df29bbb19d412173","modified":1693280910000},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"935a311142a409c1896b3ae3f01fe7a9e2db1134","modified":1693280910000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"92c19d796bdb3320df9caea59bf52df7a95d9da9","modified":1693280910000},{"_id":"themes/next/scripts/tags/label.js","hash":"8a73348186113bae0a51ea2f891c1bb882fab05a","modified":1693280910000},{"_id":"themes/next/scripts/tags/link-grid.js","hash":"18a483c2d5afd701f6080ffdddf2d1321370336c","modified":1693280910000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"9ed799c329abf830f623689d7e136991256a24ca","modified":1693280910000},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"4fb01ca650fa8b256b8d48f50dc1b18350bd3d6d","modified":1693280910000},{"_id":"themes/next/scripts/tags/note.js","hash":"7b94ddb46b7d4b0fe815f2fbe4bd375f07f55363","modified":1693280910000},{"_id":"themes/next/scripts/tags/index.js","hash":"1f6aba7820f1fb58b61969485148db21846e1aa9","modified":1693280910000},{"_id":"themes/next/scripts/tags/pdf.js","hash":"344636b6fd7e27e8831c1e194039afc0d61931cd","modified":1693280910000},{"_id":"themes/next/scripts/tags/video.js","hash":"2ee926448583be8f95af1f2884ae2c9c4830151d","modified":1693280910000},{"_id":"themes/next/scripts/tags/wavedrom.js","hash":"b44dfeeb58b41945d469141787f3dbce4b117d08","modified":1693280910000},{"_id":"themes/next/scripts/tags/tabs.js","hash":"0eabe51da40b4b13e16419c8fe02452d9a4fef73","modified":1693280910000},{"_id":"themes/next/source/css/noscript.styl","hash":"dadc81256afb127b77eac6763d5ee0ec9c77f0a3","modified":1693280910000},{"_id":"themes/next/source/css/main.styl","hash":"921a58577f411cf4eb5cfd66db0a241f8f88578c","modified":1693280910000},{"_id":"themes/next/source/css/_mixins.styl","hash":"83647a6207333b9609ba90b0946b3fa9548e6381","modified":1693280910000},{"_id":"themes/next/source/css/_colors.styl","hash":"3c6798c10cc220d83481cb3f3782e78558cee789","modified":1693280910000},{"_id":"themes/next/source/images/avatar.gif","hash":"2dbc3e2f2d624b2ca1afe6edc2ca17307f1950c8","modified":1693280910000},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1693280910000},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1693280910000},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1693280910000},{"_id":"themes/next/source/images/logo.svg","hash":"099e11ab995a2c8981427a85476d082609848c77","modified":1693280910000},{"_id":"themes/next/source/images/logo-algolia-nebula-blue-full.svg","hash":"b85e274207b1392782476a0430feac98db1e7da0","modified":1693280910000},{"_id":"themes/next/source/js/bookmark.js","hash":"0f563ffbf05fad30e854e413ab17ff7164ab5a53","modified":1693280910000},{"_id":"themes/next/source/js/comments-buttons.js","hash":"1a7344440321713426a0b2ab17e276b5bdf85ade","modified":1693280910000},{"_id":"themes/next/source/js/comments.js","hash":"66ae2e26ea36a41b72c638ea8b220296638ae952","modified":1693280910000},{"_id":"themes/next/source/js/config.js","hash":"4c4ebbe3b3f3841a26f9d5af6d0ba8bc6da01c54","modified":1693280910000},{"_id":"themes/next/source/js/motion.js","hash":"770d63c26f22705311028a36b52e999cc8a2da82","modified":1693280910000},{"_id":"themes/next/source/js/next-boot.js","hash":"da0f07f9eaaa83de70128b0feaea3fdadb90457a","modified":1693280910000},{"_id":"themes/next/source/js/pjax.js","hash":"b03ba78c6916ad2f390d55bc1bc18fafb64b0ebf","modified":1693280910000},{"_id":"themes/next/source/js/schedule.js","hash":"a1333258726caf84f368a8f8454639c7dc1626bb","modified":1693280910000},{"_id":"themes/next/layout/_partials/header/index.njk","hash":"650de421a8ce4cf685428ffbe0087ff84cbd1356","modified":1693280910000},{"_id":"themes/next/layout/_partials/head/head.njk","hash":"5388b157bba4a40b9312f4a45c6678974ccf0837","modified":1693280910000},{"_id":"themes/next/layout/_partials/header/brand.njk","hash":"dd9c4c03e99dfde0dfb8edefcb2c933f2f560efc","modified":1693280910000},{"_id":"themes/next/layout/_partials/head/head-unique.njk","hash":"8da52a144060db1a0a088ccb2e6cc8376d1fce70","modified":1693280910000},{"_id":"themes/next/layout/_partials/header/menu-item.njk","hash":"41a8b0cc16f60fa085cb719d07216d86b6bc4bf8","modified":1693280910000},{"_id":"themes/next/layout/_partials/header/menu.njk","hash":"ee6fc2f111572d3eeab0a2fecbb2d6b3e37ab26b","modified":1693280910000},{"_id":"themes/next/layout/_partials/header/sub-menu.njk","hash":"06480d8ec5f0b87eafd47f082f07968d7282dd5c","modified":1693280910000},{"_id":"themes/next/layout/_partials/page/page-header.njk","hash":"7ed4f102a1825195cff8d7995bf9219f323a9034","modified":1693280910000},{"_id":"themes/next/layout/_partials/page/categories.njk","hash":"17156d99941f28a225951ffdcfa9a115e20dc2d2","modified":1693280910000},{"_id":"themes/next/layout/_partials/page/breadcrumb.njk","hash":"89825e75cc45e9709fa6ba89883669eedaff6f46","modified":1693280910000},{"_id":"themes/next/layout/_partials/page/schedule.njk","hash":"0f4bc8e257da60f77c0c1738607b2bde55810684","modified":1693280910000},{"_id":"themes/next/layout/_partials/page/tags.njk","hash":"a18d1598e36cc72f2b0b24c3cc3c5990dfaa3254","modified":1693280910000},{"_id":"themes/next/layout/_partials/post/post-followme.njk","hash":"c1e33b4889f75acc490af3c8bde0ec56c518ff41","modified":1693280910000},{"_id":"themes/next/layout/_partials/post/post-meta.njk","hash":"9fa47e4fb342811da590ee4adc91cf81118c0a39","modified":1693280910000},{"_id":"themes/next/layout/_partials/post/post-related.njk","hash":"e0986db00a0201dd3c60570f964829c84ba5bc68","modified":1693280910000},{"_id":"themes/next/layout/_partials/post/post-share.njk","hash":"16696990e4ce65fc8db18c4635082a5d5d06ff07","modified":1693280910000},{"_id":"themes/next/layout/_partials/post/post-reward.njk","hash":"e8b8a7c41e9ec612d0c0c73419529d55d1c16256","modified":1693280910000},{"_id":"themes/next/layout/_partials/search/algolia-search.njk","hash":"efb2b6f19df02ba5ae623a1f274fff52aed21e6f","modified":1693280910000},{"_id":"themes/next/layout/_partials/search/index.njk","hash":"8f6f256ab3b351ffc80f1f3f1d9834e9a7cfac31","modified":1693280910000},{"_id":"themes/next/layout/_partials/post/post-copyright.njk","hash":"bfff923526d6800218f08dba6ce0bbf5c17755fd","modified":1693280910000},{"_id":"themes/next/layout/_partials/search/localsearch.njk","hash":"661f7acae43f0be694266323320f977d84119abe","modified":1693280910000},{"_id":"themes/next/layout/_partials/sidebar/site-overview.njk","hash":"bc5708e38b6070dff0cab6bf9480971017ce4dda","modified":1693280910000},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.njk","hash":"6215309aee028dcb734452beec448c5afb6c63fc","modified":1693280910000},{"_id":"themes/next/layout/_third-party/analytics/cloudflare.njk","hash":"a5b8297c2c383124dd6a56e256ecc0c0dcf489be","modified":1693280910000},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.njk","hash":"d89066ff53879693f023e540d59c86137172c529","modified":1693280910000},{"_id":"themes/next/layout/_third-party/analytics/growingio.njk","hash":"8afaa772c390bd9d53a5cff9645ac3168334eb98","modified":1693280910000},{"_id":"themes/next/layout/_third-party/analytics/index.njk","hash":"f900306497b133e8b098bd9f4b96b93d1d96c185","modified":1693280910000},{"_id":"themes/next/layout/_third-party/analytics/matomo.njk","hash":"4e89648a8ec8194c5823064cbca39c938a799006","modified":1693280910000},{"_id":"themes/next/layout/_third-party/analytics/microsoft-clarity.njk","hash":"9dc00fcb0a05899f048eace9f9160b78956655d5","modified":1693280910000},{"_id":"themes/next/layout/_third-party/analytics/plausible.njk","hash":"ef9f2bb7110507f1c4336800af9157d5fa9765bd","modified":1693280910000},{"_id":"themes/next/layout/_third-party/analytics/umami.njk","hash":"3343750682fbd8535e50f8129be3003ad26015b4","modified":1693280910000},{"_id":"themes/next/layout/_third-party/chat/chatra.njk","hash":"d7263fca16d0278ccf1f6aa1c6df6902a6344a09","modified":1693280910000},{"_id":"themes/next/layout/_third-party/comments/disqus.njk","hash":"9375b19a89b7fa9474e558d085af5448d4c5c50c","modified":1693280910000},{"_id":"themes/next/layout/_third-party/chat/tidio.njk","hash":"02aab857c27fc103216029be991688b12a73a525","modified":1693280910000},{"_id":"themes/next/layout/_third-party/comments/changyan.njk","hash":"d1c950f8fbdf85e7a3eae5463767a89e858e8220","modified":1693280910000},{"_id":"themes/next/layout/_third-party/comments/gitalk.njk","hash":"b63b7e2ede0d3e66e732fa1a06bda9b19e1e85d4","modified":1693280910000},{"_id":"themes/next/layout/_third-party/comments/isso.njk","hash":"64cc3bdaf644fd32c0d0a247f29f5b6904da9af3","modified":1693280910000},{"_id":"themes/next/layout/_third-party/comments/livere.njk","hash":"3b13b09fba84ec6000886890a6710736a2b8fafe","modified":1693280910000},{"_id":"themes/next/source/js/utils.js","hash":"95b7ead2f4e459c962aec41e8ce40a23694fd9f5","modified":1693280910000},{"_id":"themes/next/layout/_third-party/comments/disqusjs.njk","hash":"0749cb6902baecdfd01f779a2a2513f6d2f6a823","modified":1693280910000},{"_id":"themes/next/layout/_third-party/comments/utterances.njk","hash":"5a94032bc3512a10ad4328fc19ec07b819a1d687","modified":1693280910000},{"_id":"themes/next/layout/_third-party/math/mathjax.njk","hash":"3677017fd4572b158311f5f5d870590ab25184e0","modified":1693280910000},{"_id":"themes/next/layout/_third-party/search/algolia-search.njk","hash":"24ed76e0c72a25ac152820c750a05826a706b6f4","modified":1693280910000},{"_id":"themes/next/layout/_third-party/math/index.njk","hash":"abf37fc55aa86702118e8fdf5bf2d389dd589aa0","modified":1693280910000},{"_id":"themes/next/layout/_third-party/search/localsearch.njk","hash":"e45ea3542cdc9ed7ec8447b5e6f35df4c5e82758","modified":1693280910000},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.njk","hash":"a4bc501da0f22f7e420f0ca47e83988ce90b1368","modified":1693280910000},{"_id":"themes/next/layout/_third-party/math/katex.njk","hash":"1ebf658690468ea197bdd0416eb7cfa4bd0b083a","modified":1693280910000},{"_id":"themes/next/layout/_third-party/statistics/firestore.njk","hash":"d32ebe94560fa95824478ebbff531bffc47b194d","modified":1693280910000},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.njk","hash":"2446e748cdc102c78492216319ac02148db7daf6","modified":1693280910000},{"_id":"themes/next/layout/_third-party/statistics/index.njk","hash":"568ddf7955d11d93fb5e842b403a7ac8b1b7fdb1","modified":1693280910000},{"_id":"themes/next/layout/_third-party/tags/mermaid.njk","hash":"099e031f52fb8e47b3af5b2684737efc9e643ee7","modified":1693280910000},{"_id":"themes/next/layout/_third-party/tags/wavedrom.njk","hash":"02202bf563fb5eedde2ccad4d6c5b9109d30a703","modified":1693280910000},{"_id":"themes/next/layout/_third-party/tags/pdf.njk","hash":"2c81984cc4f5123103460442f6e046f5b6c97127","modified":1693280910000},{"_id":"themes/next/scripts/events/lib/config.js","hash":"9ec51eb61f7fee612ffc5252f489003a0fa301fc","modified":1693280910000},{"_id":"themes/next/scripts/events/lib/highlight.js","hash":"6aec7b2c38c50989a23bfaa0d560e75c7f553e12","modified":1693280910000},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"d987709267a1bc6e5014411e9983d7c49c102c16","modified":1693280910000},{"_id":"themes/next/scripts/events/lib/navigation.js","hash":"dd3562686d95a50375e6fd32e717ccb0d99c1e3d","modified":1693280910000},{"_id":"themes/next/scripts/events/lib/utils.js","hash":"6853e5433e3eaa19ea43fa20b08d956ba4cec4ac","modified":1693280910000},{"_id":"themes/next/scripts/events/lib/vendors.js","hash":"464db1e7182e5b9cdbd32e8b5368d5e683b1d9c7","modified":1693280910000},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"5798cfc8f63665031dd3e01debed051628cec319","modified":1693280910000},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"19a402a225c31edffc50f202a14e0d582d3db23e","modified":1693280910000},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"93ee5f9109dad885dc38c49bcee630c10f9dce6e","modified":1693280910000},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"7f71d6b271ba65ff333d5682e7575711d368c0d2","modified":1693280910000},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"7bb7dafdd7f6bca8464b54e17e552ce7f1714195","modified":1693280910000},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"a600a98e7436edeb31e291abca359885567df3c9","modified":1693280910000},{"_id":"themes/next/scripts/filters/comment/isso.js","hash":"ff8b5b5145220a17d0ecd9508ba9bd2d3b2da47d","modified":1693280910000},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"5a07d8bb52bc1d51a624ca8db54be144566c306b","modified":1693280910000},{"_id":"themes/next/scripts/filters/comment/utterances.js","hash":"d3bded697bc32dace689d2a6dfb6eb7514169d15","modified":1693280910000},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"96e0a7c2a65ce68215e17e369085b2ea2f1334f2","modified":1693280910000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"a1418c9dc8c0f1a0ad4ded0f4627c45bf0db1a10","modified":1693280910000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"e3be898f5ebcf435a26542653a9297ff2c71aeb0","modified":1693280910000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"48f4f277946a168d0db1ea02804e85c22ca2c7db","modified":1693280910000},{"_id":"themes/next/source/js/schemes/muse.js","hash":"ba7ba2c129d1f240c6a22cec3e53f3f22af64b6b","modified":1693280910000},{"_id":"themes/next/source/js/third-party/addtoany.js","hash":"5276c8f78ee562a8965216dc67d762e59cb4a9f2","modified":1693280910000},{"_id":"themes/next/source/js/third-party/fancybox.js","hash":"819f382c561fe5ec23c67cc5fabd63dd1cc22dc1","modified":1693280910000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"c4fc4e862d09221265ab1466085f057be2ad2e4d","modified":1693280910000},{"_id":"themes/next/source/js/third-party/pace.js","hash":"0ef04218b93561ba4d0ff420d556c3d90a756d32","modified":1693280910000},{"_id":"themes/next/source/js/third-party/quicklink.js","hash":"eed02e6fced8e5a653077205d4d4d7834ca71472","modified":1693280910000},{"_id":"themes/next/source/css/_common/components/index.styl","hash":"2298e521253b3bf376a2412271bc2a7d305051f3","modified":1693280910000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"7664491542046df9a3887cf40a06e00c0b4086a9","modified":1693280910000},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"90a86045a33c1bae49fc2f6fa1e1b53170c7f77b","modified":1693280910000},{"_id":"themes/next/source/css/_common/outline/index.styl","hash":"8e34df131830d4fa3725e4590a672ba1cf1903e5","modified":1693280910000},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"1dbf2c339adcd27026c3a2ded32ee91ce08cea26","modified":1693280910000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"d0a7c99095f490b0d2ed6b1be43d435960798cec","modified":1693280910000},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"a042571d85ff7265f799004239a45f36b716b8a6","modified":1693280910000},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"e4fecc889ba3317a64e9abba5842c79dff9b7827","modified":1693280910000},{"_id":"themes/next/source/css/_common/scaffolding/index.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1693280910000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"e840b23d33023e6d45e018f6e84b683dd56efd8d","modified":1693280910000},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"f4228c759db4a650c8d38745c2edd1dc83c45687","modified":1693280910000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1693280910000},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"782ee1fc5e669d3ddbfeb82b73ad7fe561f1a4fb","modified":1693280910000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"dafc6d23c80d6fe3e55a7711e94210d2479b629a","modified":1693280910000},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"fa4fd8f76464e214fb7318f325b13c2b62f4b478","modified":1693280910000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"fb550935d374e0bdf1097fce187337dc05cad3e1","modified":1693280910000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"ab16a3dcdc0393b9b582ef59dcc13db9320e917c","modified":1693280910000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"485d23ccb42c0d0c8ead7ea8930dd3e06d79a285","modified":1693280910000},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"3fbfab591f280e2e7f3b0265901c93bc4bd137ed","modified":1693280910000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"6569a6640f79d247a8235b3914772c0e2f99ead2","modified":1693280910000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"82cda756f5b7092df2eee6641b9786df71623bdb","modified":1693280910000},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"547c0b5cd5e7ea10d21863d13a6b16579a49396c","modified":1693280910000},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"9dfe853c901bdc52fc950bacdf15484dbb9bf140","modified":1693280910000},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1693280910000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1693280910000},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"ac2dc0ce9c775a83ef7132ae957b54539366ac9c","modified":1693280910000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"26a0cba1eee5de45a45a5e14e17707f905390512","modified":1693280910000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"72dc825c50357402c342d62ab60fc0c478ab6bc1","modified":1693280910000},{"_id":"themes/next/source/js/third-party/analytics/google-analytics.js","hash":"59684383385059dc4f8a1ff85dbbeb703bcdbcb5","modified":1693280910000},{"_id":"themes/next/source/js/third-party/analytics/growingio.js","hash":"78dd3cf04082b7dbe6246e404b2aa8e726922402","modified":1693280910000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"8000075b227749a7495eaf417cac6ccfbe441580","modified":1693280910000},{"_id":"themes/next/source/js/third-party/analytics/matomo.js","hash":"c6a25b26a1443caa70b47fd3dfa282271574deb5","modified":1693280910000},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"778ed2ad5643b93970c95626b325defeb586733f","modified":1693280910000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"91dbf3ca5c3a613d4e30618c120da535bf2d0336","modified":1693280910000},{"_id":"themes/next/source/js/third-party/chat/chatra.js","hash":"c32180522788c10e51df1803aa6842ef0432ddc9","modified":1693280910000},{"_id":"themes/next/source/js/third-party/comments/disqus.js","hash":"da361917d65e5dca8362f8cdeb6c8cc0e8316cec","modified":1693280910000},{"_id":"themes/next/source/js/third-party/comments/changyan.js","hash":"260d1a77d6a3bb33a579d3e4cca1997003e799b5","modified":1693280910000},{"_id":"themes/next/source/js/third-party/chat/tidio.js","hash":"b0079f6a4601e06ca6fe46e83a2f5af553e9bc3c","modified":1693280910000},{"_id":"themes/next/source/js/third-party/comments/disqusjs.js","hash":"1e826dea3f684c0515f362dc1352447a1f0eae71","modified":1693280910000},{"_id":"themes/next/source/js/third-party/comments/isso.js","hash":"753a873b6f566aff5ba77ca23f91b78eb880ca64","modified":1693280910000},{"_id":"themes/next/source/js/third-party/analytics/baidu-analytics.js","hash":"f629acc46ff40c071ffd31b77d5c7616f0fdd778","modified":1693280910000},{"_id":"themes/next/source/js/third-party/comments/gitalk.js","hash":"0ec038cf83e8ec067534f16a54041e47a3c1e59a","modified":1693280910000},{"_id":"themes/next/source/js/third-party/comments/livere.js","hash":"2247d88c934c765c43013337860774aaa99f0b31","modified":1693280910000},{"_id":"themes/next/source/js/third-party/comments/utterances.js","hash":"f67f90eb03e284c82da2b8cf2f1e31801813c16d","modified":1693280910000},{"_id":"themes/next/source/js/third-party/math/katex.js","hash":"83c54ee536e487a1031783443fe0cb63b1b4767e","modified":1693280910000},{"_id":"themes/next/source/js/third-party/math/mathjax.js","hash":"5c749b9c1c3bb738122d0516211ecff6496d4907","modified":1693280910000},{"_id":"themes/next/source/js/third-party/statistics/firestore.js","hash":"6e0682bb42170d61b13b786295f45f9c785f8b73","modified":1693280910000},{"_id":"themes/next/source/js/third-party/search/local-search.js","hash":"4536cb6d0a9bbaaa86fab3fa0101f6a3a3ec5a76","modified":1693280910000},{"_id":"themes/next/source/js/third-party/search/algolia-search.js","hash":"fdb7b7cef1a147d897e7f7cd8903b58368ec2062","modified":1693280910000},{"_id":"themes/next/source/js/third-party/statistics/lean-analytics.js","hash":"835cbf54c49ef1327f47df70ff2636ad36b6f57d","modified":1693280910000},{"_id":"themes/next/source/js/third-party/tags/mermaid.js","hash":"6bf821310342c5b87a631873e7650a475a0765f1","modified":1693280910000},{"_id":"themes/next/source/js/third-party/tags/wavedrom.js","hash":"40dcd10df6edf124088c329346e0cc0bdac74ef1","modified":1693280910000},{"_id":"themes/next/source/js/third-party/tags/pdf.js","hash":"af78c22f0e61c8c8aa8794e585e0d632c6d4fcb8","modified":1693280910000},{"_id":"themes/next/source/css/_common/components/post/post-body.styl","hash":"56d5b7ff73f466c9ae54f7204ae899281295d749","modified":1693280910000},{"_id":"themes/next/source/css/_common/components/post/index.styl","hash":"f495462bf2ae0548c4b6633e6170d811cff35f33","modified":1736219741913},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"7369928305330c73ae0b3f063a681a8384d8fde4","modified":1693280910000},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"1ecfd64507954810b07a9d21fb5305b5378feda0","modified":1693280910000},{"_id":"themes/next/source/css/_common/components/post/post-footer.styl","hash":"11497388f124bfbb4001495a67d3629a9f618405","modified":1693280910000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"aa366d37389760c8595529b850f461569577a1c5","modified":1693280910000},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"1191f1bfa5c43e54be8e5b3cc0d802984e161747","modified":1693280910000},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"8afdc311c6b8db121758371f95cf1c5e77354f42","modified":1693280910000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"04cf4a69537fc14d3b8904f965d283356853847f","modified":1693280910000},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"ebfba158a0a4af3d1dabcacbc58986664de52140","modified":1693280910000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"9ac6f477177264c26a46e8333b8456720a0444dc","modified":1693280910000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"b6e2eb1550a7845cb2adf86081a4ab6c7bde1e68","modified":1693280910000},{"_id":"themes/next/source/css/_common/components/third-party/disqusjs.styl","hash":"877a537d5b95beb048142e4fdee6f17e6ef9c7bb","modified":1693280910000},{"_id":"themes/next/source/css/_common/components/pages/index.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1693280910000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"6b816c2511242ee503fb5f34cd3e4dcdafc06b85","modified":1693280910000},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"1a81d1a71fcf0699629ce6e72dfd0a15f3a2dd0a","modified":1693280910000},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"8f094c4ac17e2ab45569b12d157747f9c7333c12","modified":1693280910000},{"_id":"themes/next/source/css/_common/components/third-party/index.styl","hash":"54d12e2c5d9982f7b9e5b23be5133954a8514e9d","modified":1693280910000},{"_id":"themes/next/source/css/_common/components/third-party/utterances.styl","hash":"56d90ae0559caa55b75f3c300ff2711f9ed65fc4","modified":1693280910000},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"9d995eb4871a6c273d9d51558676a1fdabf69e72","modified":1693280910000},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"e72799ce3f9b79753e365b2f8c8ef6c310668d4a","modified":1693280910000},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"e74f4bb47a101b014ee2a1783c87f3b87323f9a0","modified":1693280910000},{"_id":"themes/next/source/css/_common/outline/footer/index.styl","hash":"4e967702cf4c637132346bc74ec8854426f1a68c","modified":1693280910000},{"_id":"themes/next/source/css/_common/outline/header/index.styl","hash":"6e0d0796ef7fbbb62ffdfb448753a850de82c74f","modified":1693280910000},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"38c64c2d04e46848382bfa246a0e9c508294767b","modified":1693280910000},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"bbbc40b03cb299d2a6a568f329b2ce98e1cdc430","modified":1693280910000},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"bf3ad8b4268f763a1e26377681644887694bc009","modified":1693280910000},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"a851e9d5aefcd027c95eeb323860b6da70f202d1","modified":1693280910000},{"_id":"themes/next/source/css/_common/outline/sidebar/related-posts.styl","hash":"b05908f04ef95f2d91e6eba89b12411c378d050f","modified":1693280910000},{"_id":"themes/next/source/css/_common/outline/sidebar/index.styl","hash":"da5e88f8debd5ac8d7af5c6ba6240df66104955f","modified":1693280910000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"5b38ac4a0f1ade0e681aff0e3366c481d9cf3dcd","modified":1693280910000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"0847400d8579b0a2dd1bf662c78954c10adf2680","modified":1693280910000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"c6a27beb3f741211a14576026f3b4cfc44cc6407","modified":1693280910000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"46eece42510c2c89bb9209afb0262ad76a4b0b36","modified":1693280910000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"c2e354a565c8c1b32bd0ceacc972b17982758b67","modified":1693280910000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"9a7c71560fbdc936ad4e736fe15063ea3e8a644b","modified":1693280910000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"24752d145c6fb8f5344dca9c7b9640839c02e009","modified":1693280910000},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"26dd0adfcb1db6df29c6090c8d7e9b5a43583fb0","modified":1693280910000},{"_id":"themes/next/source/css/_common/scaffolding/highlight/index.styl","hash":"12c230f9f7e0d408aef4c09dc007f304b5db8841","modified":1693280910000},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"f634f94828620e88c3f5a8db56f7944f6ba232b0","modified":1693280910000},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"d6418fd2bbfba7b73ddf11ec62db9637fdf5d8af","modified":1693280910000},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"393ff96234e4196b569d4b11496774eb78e147de","modified":1693280910000},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"debee14539272fbe3835a7d3853af2230baa3501","modified":1693280910000},{"_id":"themes/next/source/css/_common/scaffolding/tags/index.styl","hash":"22cd37bd5df9972d5074710896aba4424ad5161c","modified":1693280910000},{"_id":"themes/next/source/css/_common/scaffolding/tags/link-grid.styl","hash":"7f8a7345e6537a62cd9e9a94c8f7065b541d9b04","modified":1693280910000},{"_id":"themes/next/source/css/_common/scaffolding/tags/mermaid.styl","hash":"48d35dba575a7c9e8845b16652e76b7d4a4646de","modified":1693280910000},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"b6654a1d7cf82577d8263faffee8af3ad4a5c0e8","modified":1693280910000},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"98d4c20aff0f0fcfe1824017fb06ab21ef0d218e","modified":1693280910000},{"_id":"themes/next/source/css/_common/scaffolding/tags/wavedrom.styl","hash":"af113411ad9cca7674177be36af8dd399680834d","modified":1693280910000},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"33dd6ad015dde65fd46f34961655442e8e82b52e","modified":1693280910000},{"_id":"public/atom.xml","hash":"0e834f3f13474057b73570a394ed43a0687533d1","modified":1736229757302},{"_id":"public/rss2.xml","hash":"3583365e18ba512015a916d46174c0cb81787d64","modified":1736229757302},{"_id":"public/blog/06609450a8e1.html","hash":"2b27c1296d5b6b36b88d53878f2678cd1b24e59b","modified":1736229757302},{"_id":"public/archives/index.html","hash":"1cb42f657770c4f19f57fd5da0f2a82b6b94c5a9","modified":1736229757302},{"_id":"public/archives/2023/index.html","hash":"e0301d20579f1f40e9ded33f0ed54b46ad200cf3","modified":1736229757302},{"_id":"public/archives/2023/08/index.html","hash":"48b420c0bd20369333d4c636c4dea39a0c5be686","modified":1736229757302},{"_id":"public/archives/2024/index.html","hash":"f6de61515dc65bb9d7502244baa88bb06fa20cc9","modified":1736229757302},{"_id":"public/archives/2024/12/index.html","hash":"463764bc8c61ae0be7d0ad74c55dccfc9ba3dce2","modified":1736229757302},{"_id":"public/archives/2025/index.html","hash":"f1df1cacf7c1bdbd604209eeed430fc89928b721","modified":1736229757302},{"_id":"public/archives/2025/01/index.html","hash":"a7040718ef7f05f73563fea05dbc6430fc42321b","modified":1736229757302},{"_id":"public/categories/JavaScript/index.html","hash":"8191a1293f043aa9a3acf9b36ac8666982a4b5ac","modified":1736229757302},{"_id":"public/tags/数组/index.html","hash":"35566fe9184b51c079cf36a13781fb0113dd822a","modified":1736229757302},{"_id":"public/tags/迭代/index.html","hash":"09f47bdda1f9f2aa7f65d7e03d77d37af572e871","modified":1736229757302},{"_id":"public/tags/稀疏/index.html","hash":"9a7643ebb95873aa5b0aa0d8cf36d6eb8dcf892a","modified":1736229757302},{"_id":"public/tags/方法/index.html","hash":"3f4d0aa586da72d58044c349bb76f2113b93e569","modified":1736229757302},{"_id":"public/tags/异常处理/index.html","hash":"45f8b69080aaacd482dfcb809716e9ba6124c23f","modified":1736229757302},{"_id":"public/tags/性能优化/index.html","hash":"614701a321e65379f1f4c0bae840d6ed32ec960e","modified":1736229757302},{"_id":"public/tags/开发技巧/index.html","hash":"f98a1ec76ac31020cccfc085472c9759d8fce7a1","modified":1736229757302},{"_id":"public/tags/CSS/index.html","hash":"a35ba196a1474cd91f19f5dfb9ab7c8dd4ac72d4","modified":1736229757302},{"_id":"public/tags/选择器/index.html","hash":"f03baa7582201b050b300811810e5430760e5109","modified":1736229757302},{"_id":"public/tags/样式/index.html","hash":"a85d3c4b92adc5a9ac55f94a8d770a32150a94d4","modified":1736229757302},{"_id":"public/tags/JavaScript/index.html","hash":"2de326ea4d08365b410493586fda0bd6998559fc","modified":1736229757302},{"_id":"public/tags/对象排序/index.html","hash":"8b7e55078289ad48eefa65a301fe73455c474ff7","modified":1736229757302},{"_id":"public/tags/无序性/index.html","hash":"57e40abdb843c67c2fb9190e53c39f25742c2fe0","modified":1736229757302},{"_id":"public/tags/ES6/index.html","hash":"eb3ccd0b7e24fe139b6b4f3bf9c4a3357cfca95e","modified":1736229757302},{"_id":"public/tags/前端开发/index.html","hash":"c5edab877583d0786abbd23089e928ad399b80d6","modified":1736229757302},{"_id":"public/post/shu-zu-shi-fou-cun-zai-jiao-ji-de-xing-neng-you-hua-wen-ti-z1kwfix.html","hash":"6ea52d0c1d2f23c6df0daa47fec92436ba8cc4b9","modified":1736229757302},{"_id":"public/post/research-on-array-iteration-methods-hev8j.html","hash":"61618ea43be13e04202d6c501499e33e5da40e9b","modified":1736229757302},{"_id":"public/post/talk-about-the-calculation-rules-of-the-priority-of-css-selector-priority-z2qeyfl.html","hash":"5c9ff6943dabcfa9cf4526e80ba57d94ca50a529","modified":1736229757302},{"_id":"public/post/some-explorations-about-the-order-of-object-in-javascript-z1s1tng.html","hash":"91bfe0bccc869ee532955b882d325712b79801b7","modified":1736229757302},{"_id":"public/index.html","hash":"1344b0539f3f76550f7fa65246062d3f8528e6f0","modified":1736229757302},{"_id":"public/CNAME","hash":"e9c01d25388262ace35f1e19b25f79ffe981eea9","modified":1736229757302},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1736229757302},{"_id":"public/images/avatar.gif","hash":"2dbc3e2f2d624b2ca1afe6edc2ca17307f1950c8","modified":1736229757302},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1736229757302},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1736229757302},{"_id":"public/images/logo-algolia-nebula-blue-full.svg","hash":"b85e274207b1392782476a0430feac98db1e7da0","modified":1736229757302},{"_id":"public/images/logo.svg","hash":"099e11ab995a2c8981427a85476d082609848c77","modified":1736229757302},{"_id":"public/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1736229757302},{"_id":"public/css/noscript.css","hash":"4cd5301e478e0e0d4b176740ec314087ec5cb707","modified":1736229757302},{"_id":"public/js/script.js","hash":"49773efcb2221bbdf2d86f3f5c5ff2d841b528cc","modified":1736229757302},{"_id":"public/js/comments-buttons.js","hash":"1a7344440321713426a0b2ab17e276b5bdf85ade","modified":1736229757302},{"_id":"public/js/comments.js","hash":"66ae2e26ea36a41b72c638ea8b220296638ae952","modified":1736229757302},{"_id":"public/js/bookmark.js","hash":"0f563ffbf05fad30e854e413ab17ff7164ab5a53","modified":1736229757302},{"_id":"public/js/config.js","hash":"4c4ebbe3b3f3841a26f9d5af6d0ba8bc6da01c54","modified":1736229757302},{"_id":"public/js/motion.js","hash":"770d63c26f22705311028a36b52e999cc8a2da82","modified":1736229757302},{"_id":"public/js/next-boot.js","hash":"da0f07f9eaaa83de70128b0feaea3fdadb90457a","modified":1736229757302},{"_id":"public/js/pjax.js","hash":"b03ba78c6916ad2f390d55bc1bc18fafb64b0ebf","modified":1736229757302},{"_id":"public/js/schedule.js","hash":"a1333258726caf84f368a8f8454639c7dc1626bb","modified":1736229757302},{"_id":"public/js/schemes/muse.js","hash":"ba7ba2c129d1f240c6a22cec3e53f3f22af64b6b","modified":1736229757302},{"_id":"public/js/third-party/addtoany.js","hash":"5276c8f78ee562a8965216dc67d762e59cb4a9f2","modified":1736229757302},{"_id":"public/js/third-party/fancybox.js","hash":"819f382c561fe5ec23c67cc5fabd63dd1cc22dc1","modified":1736229757302},{"_id":"public/js/third-party/pace.js","hash":"0ef04218b93561ba4d0ff420d556c3d90a756d32","modified":1736229757302},{"_id":"public/js/third-party/quicklink.js","hash":"eed02e6fced8e5a653077205d4d4d7834ca71472","modified":1736229757302},{"_id":"public/js/third-party/analytics/google-analytics.js","hash":"59684383385059dc4f8a1ff85dbbeb703bcdbcb5","modified":1736229757302},{"_id":"public/js/third-party/analytics/baidu-analytics.js","hash":"f629acc46ff40c071ffd31b77d5c7616f0fdd778","modified":1736229757302},{"_id":"public/js/third-party/analytics/growingio.js","hash":"78dd3cf04082b7dbe6246e404b2aa8e726922402","modified":1736229757302},{"_id":"public/js/third-party/analytics/matomo.js","hash":"c6a25b26a1443caa70b47fd3dfa282271574deb5","modified":1736229757302},{"_id":"public/js/third-party/chat/chatra.js","hash":"c32180522788c10e51df1803aa6842ef0432ddc9","modified":1736229757302},{"_id":"public/js/third-party/comments/changyan.js","hash":"260d1a77d6a3bb33a579d3e4cca1997003e799b5","modified":1736229757302},{"_id":"public/js/third-party/comments/disqus.js","hash":"da361917d65e5dca8362f8cdeb6c8cc0e8316cec","modified":1736229757302},{"_id":"public/js/third-party/comments/disqusjs.js","hash":"1e826dea3f684c0515f362dc1352447a1f0eae71","modified":1736229757302},{"_id":"public/js/third-party/chat/tidio.js","hash":"b0079f6a4601e06ca6fe46e83a2f5af553e9bc3c","modified":1736229757302},{"_id":"public/js/third-party/comments/isso.js","hash":"753a873b6f566aff5ba77ca23f91b78eb880ca64","modified":1736229757302},{"_id":"public/js/third-party/comments/gitalk.js","hash":"0ec038cf83e8ec067534f16a54041e47a3c1e59a","modified":1736229757302},{"_id":"public/js/third-party/comments/livere.js","hash":"2247d88c934c765c43013337860774aaa99f0b31","modified":1736229757302},{"_id":"public/js/third-party/comments/utterances.js","hash":"f67f90eb03e284c82da2b8cf2f1e31801813c16d","modified":1736229757302},{"_id":"public/js/third-party/math/katex.js","hash":"83c54ee536e487a1031783443fe0cb63b1b4767e","modified":1736229757302},{"_id":"public/js/third-party/math/mathjax.js","hash":"5c749b9c1c3bb738122d0516211ecff6496d4907","modified":1736229757302},{"_id":"public/js/third-party/search/algolia-search.js","hash":"fdb7b7cef1a147d897e7f7cd8903b58368ec2062","modified":1736229757302},{"_id":"public/js/third-party/statistics/firestore.js","hash":"6e0682bb42170d61b13b786295f45f9c785f8b73","modified":1736229757302},{"_id":"public/js/third-party/search/local-search.js","hash":"4536cb6d0a9bbaaa86fab3fa0101f6a3a3ec5a76","modified":1736229757302},{"_id":"public/js/third-party/statistics/lean-analytics.js","hash":"835cbf54c49ef1327f47df70ff2636ad36b6f57d","modified":1736229757302},{"_id":"public/js/third-party/tags/mermaid.js","hash":"6bf821310342c5b87a631873e7650a475a0765f1","modified":1736229757302},{"_id":"public/js/third-party/tags/pdf.js","hash":"af78c22f0e61c8c8aa8794e585e0d632c6d4fcb8","modified":1736229757302},{"_id":"public/js/third-party/tags/wavedrom.js","hash":"40dcd10df6edf124088c329346e0cc0bdac74ef1","modified":1736229757302},{"_id":"public/css/main.css","hash":"60613bedef28abd9ac48f8f47a5c7d0ecab757f7","modified":1736229757302},{"_id":"public/css/style.css","hash":"8b0f8c791b17e05fc1620c3abfc40d07aaee2c9c","modified":1736229757302},{"_id":"public/js/utils.js","hash":"95b7ead2f4e459c962aec41e8ce40a23694fd9f5","modified":1736229757302},{"_id":"public/js/jquery-3.6.4.min.js","hash":"eda46747c71d38a880bee44f9a439c3858bb8f99","modified":1736229757302},{"_id":"public/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1736229757302},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1736229757302}],"Category":[{"name":"JavaScript","_id":"cm5m2db0n0002tsnvdqtlbkjm"}],"Data":[],"Page":[],"Post":[{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2025-01-07T01:59:48.874Z","updated":"2025-01-07T01:59:48.874Z","comments":1,"layout":"post","photos":[],"_id":"cm5ltqnd30000n3nvbenkazsq","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"研究数组迭代方法：稀疏数组处理、多种遍历方式","date":"2024-12-31T06:21:53.000Z","updated":"2025-01-07T02:44:16.000Z","excerpt":"本文探讨了数组的不同迭代方法及其在处理稀疏数组时的表现。稀疏数组中存在空槽，而不同的迭代方法对待这些空槽的方式各异。根据 MDN 的说明，旧的迭代方法如 `forEach` 不会访问空槽，而其他方法（如 `concat`、`copyWithin` 等）在复制时会保留这些空槽，因此最终数组仍为稀疏状态。相对地，新的迭代方法则将空槽视为包含 `undefined`。文章列举了处理空槽和不对空槽进行特殊处理的常用数组方法，并总结了各自的特性，强调了在使用迭代方法时需要了解其对稀疏数组的行为，以便做出合适的选择。","comments":1,"toc":true,"_content":"\n![image](https://raw.githubusercontent.com/eeymoo/Eeymoo.github.io/main/images/unsplash-LuiP3ojMg5w-20241231143423-5i448yi.jpg)\n\n# 数组迭代方法的研究\n\n我们知道数组存在一些迭代方法将会遍历数组，在这篇文章中主要研究一些这些方法的相关问题，比如说[稀疏数组](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Indexed_collections#%E7%A8%80%E7%96%8F%E6%95%B0%E7%BB%84)处理方法、如何打断、方法内异常处理等等。\n\n## 稀疏数组处理方法\n\n不同的迭代方法在处理稀疏数组的时候存在不同的方式，在 MDN 中指出，在旧的迭代方法中**处理空槽的方式与处理包含** **​`undefined`​**​ **索引的方式不同**，而在新的迭代方法中**不会对空槽进行特殊处理，而是将它们视为包含** **​`undefined`​**​。\n\n在旧的方法中对空槽的方式是  **“诸如** **​`forEach`​**​ **之类的迭代方法根本不会访问空槽。其他方法，如** **​`concat`​**​ **、**​**​`copyWithin`​**​ **等，在进行复制时会保留空槽，因此最终数组依然是稀疏的。”**\n\n以下数组对数组进行了特殊处理 [`concat()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/concat)​、[`copyWithin()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin)​、[`every()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/every)​、[`filter()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/filter)​、[`flat()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/flat)​、[`flatMap()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/flatMap)​、[`forEach()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach)​、[`indexOf()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf)​、[`lastIndexOf()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf)​、[`map()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/map)​、[`reduce()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce)​、[`reduceRight()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight)​、[`reverse()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse)​、[`slice()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/slice)​、[`some()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/some)​、[`sort()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/sort)​ 和 [`splice()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/splice)​。\n\n不对空槽进行特殊处理的方法，将其视为 `undifined` ​的方法有：[`entries()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/entries)​、[`fill()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/fill)​、[`find()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/find)​、[`findIndex()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex)​、[`findLast()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/findLast)​、[`findLastIndex()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/findLastIndex)​、[`includes()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/includes)​、[`join()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/join)​、[`keys()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/keys)​、[`toLocaleString()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/toLocaleString)​、[`values()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/values)​ 和 [`with()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/with)​。\n\n**引用**\n\n0. [MDN - 数组方法和空槽](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array#%E6%95%B0%E7%BB%84%E6%96%B9%E6%B3%95%E5%92%8C%E7%A9%BA%E6%A7%BD)\n\n## 数组迭代方法的打断方式\n\n> **如果需要在数组迭代时需要灵活的中断迭代，通常建议使用传统的** **​`for`​**​**循环或** **​`for...of`​**​**循环，这样可以更直接地使用** **​`break`​**​**来中断循环。**\n\n当然我们也可以研究一些常见方法的打断方式，比如说，我们在方法外设置一个变量 `isBreak` ​作为判断是否是否需要打断的依据，在需要打断的地方将 isBreak 设置为 true，当然我们需要在方法的前面放一段特殊的代码。整体代码如下：\n\n```js\nlet isBreak;\n\nlet arr = [1, 2, 3, 4, 5];\narr.forEach((item, idnex) => {\n    if(idnex === 0){\n        isBreak = false;\n    }\n    if(isBreak){\n        return;\n    }\n    console.log(item);\n    if(item === 3) {\n        isBreak = true;\n    }\n})\n```\n\n在这个例子中，`isBreak`​ 用于控制循环是否继续。当遇到 `item === 3`​ 时，我们将 `isBreak`​ 设置为 `true`​，从而在下次迭代时跳过后续的逻辑。\n\n当然也有一些方法自带打断，例如：\n\n1. some 会在存在一个元素符合测试函数时，停止遍历，并且返回 true；\n2. every 会在存在一个元素不符合测试函数是，停止遍历，并且返回 false；\n3. find 和 findIndex 会在找到第一个符合的元素时，停止遍历，并且返回值或者索引；\n\n## 数组迭代方法的异常处理\n\n在数组迭代方法的异常处理中通常需要思考的问题主要是，出现异常是否继续执行接下来的迭代，如果需要执行接下来的迭代通常是将 try-catch 防止方法内，如果出现了异常将不需要迭代剩下的元素，就需要将 try-catch 放在方法外。\n\n```js\nlet arr = [1, 2, 3, 4, 5];\narr.forEach(item => {\n    try {\n        if (item === 3) {\n            throw new Error('Something went wrong!');\n        }\n        console.log(item);\n    } catch (error) {\n        console.error(`Error processing item ${item}: ${error.message}`);\n    }\n});\n\n// 输出:\n// 1\n// 2\n// Error processing item 3: Something went wrong!\n// 4\n// 5\n```\n\n在上面的代码中，假设在 item===3 的时候出现了一个不是很严重的问题，后续代码可以继续执行。\n\n```js\nlet arr = [1, 2, 3, 4, 5];\ntry {\n    arr.forEach(item => {\n        if (item === 3) {\n            throw new Error('Something went wrong!');\n        }\n        console.log(item);\n    });\n} catch (error) {\n    console.error(`Iteration stopped due to error: ${error.message}`);\n}\n\n// 输出:\n// 1\n// 2\n// Iteration stopped due to error: Something went wrong\n```\n\n‍\n","source":"_posts/research-on-array-iteration-methods-hev8j.md","raw":"---\ntitle: 研究数组迭代方法：稀疏数组处理、多种遍历方式\ndate: '2024-12-31 14:21:53'\nupdated: '2025-01-07 10:44:16'\nexcerpt: >-\n  本文探讨了数组的不同迭代方法及其在处理稀疏数组时的表现。稀疏数组中存在空槽，而不同的迭代方法对待这些空槽的方式各异。根据 MDN 的说明，旧的迭代方法如\n  `forEach` 不会访问空槽，而其他方法（如 `concat`、`copyWithin`\n  等）在复制时会保留这些空槽，因此最终数组仍为稀疏状态。相对地，新的迭代方法则将空槽视为包含\n  `undefined`。文章列举了处理空槽和不对空槽进行特殊处理的常用数组方法，并总结了各自的特性，强调了在使用迭代方法时需要了解其对稀疏数组的行为，以便做出合适的选择。\ntags:\n  - 数组\n  - 迭代\n  - 稀疏\n  - 方法\n  - 异常处理\ncategories:\n  - JavaScript\npermalink: /post/research-on-array-iteration-methods-hev8j.html\ncomments: true\ntoc: true\n---\n\n![image](https://raw.githubusercontent.com/eeymoo/Eeymoo.github.io/main/images/unsplash-LuiP3ojMg5w-20241231143423-5i448yi.jpg)\n\n# 数组迭代方法的研究\n\n我们知道数组存在一些迭代方法将会遍历数组，在这篇文章中主要研究一些这些方法的相关问题，比如说[稀疏数组](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Indexed_collections#%E7%A8%80%E7%96%8F%E6%95%B0%E7%BB%84)处理方法、如何打断、方法内异常处理等等。\n\n## 稀疏数组处理方法\n\n不同的迭代方法在处理稀疏数组的时候存在不同的方式，在 MDN 中指出，在旧的迭代方法中**处理空槽的方式与处理包含** **​`undefined`​**​ **索引的方式不同**，而在新的迭代方法中**不会对空槽进行特殊处理，而是将它们视为包含** **​`undefined`​**​。\n\n在旧的方法中对空槽的方式是  **“诸如** **​`forEach`​**​ **之类的迭代方法根本不会访问空槽。其他方法，如** **​`concat`​**​ **、**​**​`copyWithin`​**​ **等，在进行复制时会保留空槽，因此最终数组依然是稀疏的。”**\n\n以下数组对数组进行了特殊处理 [`concat()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/concat)​、[`copyWithin()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin)​、[`every()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/every)​、[`filter()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/filter)​、[`flat()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/flat)​、[`flatMap()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/flatMap)​、[`forEach()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach)​、[`indexOf()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf)​、[`lastIndexOf()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf)​、[`map()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/map)​、[`reduce()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce)​、[`reduceRight()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight)​、[`reverse()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse)​、[`slice()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/slice)​、[`some()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/some)​、[`sort()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/sort)​ 和 [`splice()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/splice)​。\n\n不对空槽进行特殊处理的方法，将其视为 `undifined` ​的方法有：[`entries()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/entries)​、[`fill()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/fill)​、[`find()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/find)​、[`findIndex()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex)​、[`findLast()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/findLast)​、[`findLastIndex()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/findLastIndex)​、[`includes()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/includes)​、[`join()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/join)​、[`keys()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/keys)​、[`toLocaleString()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/toLocaleString)​、[`values()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/values)​ 和 [`with()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/with)​。\n\n**引用**\n\n0. [MDN - 数组方法和空槽](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array#%E6%95%B0%E7%BB%84%E6%96%B9%E6%B3%95%E5%92%8C%E7%A9%BA%E6%A7%BD)\n\n## 数组迭代方法的打断方式\n\n> **如果需要在数组迭代时需要灵活的中断迭代，通常建议使用传统的** **​`for`​**​**循环或** **​`for...of`​**​**循环，这样可以更直接地使用** **​`break`​**​**来中断循环。**\n\n当然我们也可以研究一些常见方法的打断方式，比如说，我们在方法外设置一个变量 `isBreak` ​作为判断是否是否需要打断的依据，在需要打断的地方将 isBreak 设置为 true，当然我们需要在方法的前面放一段特殊的代码。整体代码如下：\n\n```js\nlet isBreak;\n\nlet arr = [1, 2, 3, 4, 5];\narr.forEach((item, idnex) => {\n    if(idnex === 0){\n        isBreak = false;\n    }\n    if(isBreak){\n        return;\n    }\n    console.log(item);\n    if(item === 3) {\n        isBreak = true;\n    }\n})\n```\n\n在这个例子中，`isBreak`​ 用于控制循环是否继续。当遇到 `item === 3`​ 时，我们将 `isBreak`​ 设置为 `true`​，从而在下次迭代时跳过后续的逻辑。\n\n当然也有一些方法自带打断，例如：\n\n1. some 会在存在一个元素符合测试函数时，停止遍历，并且返回 true；\n2. every 会在存在一个元素不符合测试函数是，停止遍历，并且返回 false；\n3. find 和 findIndex 会在找到第一个符合的元素时，停止遍历，并且返回值或者索引；\n\n## 数组迭代方法的异常处理\n\n在数组迭代方法的异常处理中通常需要思考的问题主要是，出现异常是否继续执行接下来的迭代，如果需要执行接下来的迭代通常是将 try-catch 防止方法内，如果出现了异常将不需要迭代剩下的元素，就需要将 try-catch 放在方法外。\n\n```js\nlet arr = [1, 2, 3, 4, 5];\narr.forEach(item => {\n    try {\n        if (item === 3) {\n            throw new Error('Something went wrong!');\n        }\n        console.log(item);\n    } catch (error) {\n        console.error(`Error processing item ${item}: ${error.message}`);\n    }\n});\n\n// 输出:\n// 1\n// 2\n// Error processing item 3: Something went wrong!\n// 4\n// 5\n```\n\n在上面的代码中，假设在 item===3 的时候出现了一个不是很严重的问题，后续代码可以继续执行。\n\n```js\nlet arr = [1, 2, 3, 4, 5];\ntry {\n    arr.forEach(item => {\n        if (item === 3) {\n            throw new Error('Something went wrong!');\n        }\n        console.log(item);\n    });\n} catch (error) {\n    console.error(`Iteration stopped due to error: ${error.message}`);\n}\n\n// 输出:\n// 1\n// 2\n// Iteration stopped due to error: Something went wrong\n```\n\n‍\n","slug":"research-on-array-iteration-methods-hev8j","published":1,"__permalink":"/post/research-on-array-iteration-methods-hev8j.html","layout":"post","photos":[],"_id":"cm5m2db0h0000tsnvf4q2f8rs","content":"<p><img src=\"https://raw.githubusercontent.com/eeymoo/Eeymoo.github.io/main/images/unsplash-LuiP3ojMg5w-20241231143423-5i448yi.jpg\" alt=\"image\"></p>\n<h1 id=\"数组迭代方法的研究\"><a href=\"#数组迭代方法的研究\" class=\"headerlink\" title=\"数组迭代方法的研究\"></a>数组迭代方法的研究</h1><p>我们知道数组存在一些迭代方法将会遍历数组，在这篇文章中主要研究一些这些方法的相关问题，比如说<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Indexed_collections#%E7%A8%80%E7%96%8F%E6%95%B0%E7%BB%84\">稀疏数组</a>处理方法、如何打断、方法内异常处理等等。</p>\n<h2 id=\"稀疏数组处理方法\"><a href=\"#稀疏数组处理方法\" class=\"headerlink\" title=\"稀疏数组处理方法\"></a>稀疏数组处理方法</h2><p>不同的迭代方法在处理稀疏数组的时候存在不同的方式，在 MDN 中指出，在旧的迭代方法中<strong>处理空槽的方式与处理包含</strong> <strong>​<code>undefined</code>​</strong>​ <strong>索引的方式不同</strong>，而在新的迭代方法中<strong>不会对空槽进行特殊处理，而是将它们视为包含</strong> <strong>​<code>undefined</code>​</strong>​。</p>\n<p>在旧的方法中对空槽的方式是  <strong>“诸如</strong> <strong>​<code>forEach</code>​</strong>​ <strong>之类的迭代方法根本不会访问空槽。其他方法，如</strong> <strong>​<code>concat</code>​</strong>​ <strong>、</strong>​<strong>​<code>copyWithin</code>​</strong>​ <strong>等，在进行复制时会保留空槽，因此最终数组依然是稀疏的。”</strong></p>\n<p>以下数组对数组进行了特殊处理 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/concat\"><code>concat()</code></a>​、<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin\"><code>copyWithin()</code></a>​、<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/every\"><code>every()</code></a>​、<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/filter\"><code>filter()</code></a>​、<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/flat\"><code>flat()</code></a>​、<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/flatMap\"><code>flatMap()</code></a>​、<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach\"><code>forEach()</code></a>​、<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf\"><code>indexOf()</code></a>​、<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf\"><code>lastIndexOf()</code></a>​、<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/map\"><code>map()</code></a>​、<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce\"><code>reduce()</code></a>​、<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight\"><code>reduceRight()</code></a>​、<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse\"><code>reverse()</code></a>​、<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/slice\"><code>slice()</code></a>​、<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/some\"><code>some()</code></a>​、<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/sort\"><code>sort()</code></a>​ 和 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/splice\"><code>splice()</code></a>​。</p>\n<p>不对空槽进行特殊处理的方法，将其视为 <code>undifined</code> ​的方法有：<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/entries\"><code>entries()</code></a>​、<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/fill\"><code>fill()</code></a>​、<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/find\"><code>find()</code></a>​、<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex\"><code>findIndex()</code></a>​、<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/findLast\"><code>findLast()</code></a>​、<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/findLastIndex\"><code>findLastIndex()</code></a>​、<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/includes\"><code>includes()</code></a>​、<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/join\"><code>join()</code></a>​、<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/keys\"><code>keys()</code></a>​、<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/toLocaleString\"><code>toLocaleString()</code></a>​、<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/values\"><code>values()</code></a>​ 和 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/with\"><code>with()</code></a>​。</p>\n<p><strong>引用</strong></p>\n<ol start=\"0\">\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array#%E6%95%B0%E7%BB%84%E6%96%B9%E6%B3%95%E5%92%8C%E7%A9%BA%E6%A7%BD\">MDN - 数组方法和空槽</a></li>\n</ol>\n<h2 id=\"数组迭代方法的打断方式\"><a href=\"#数组迭代方法的打断方式\" class=\"headerlink\" title=\"数组迭代方法的打断方式\"></a>数组迭代方法的打断方式</h2><blockquote>\n<p><strong>如果需要在数组迭代时需要灵活的中断迭代，通常建议使用传统的</strong> <strong>​<code>for</code>​</strong>​<strong>循环或</strong> <strong>​<code>for...of</code>​</strong>​<strong>循环，这样可以更直接地使用</strong> <strong>​<code>break</code>​</strong>​<strong>来中断循环。</strong></p>\n</blockquote>\n<p>当然我们也可以研究一些常见方法的打断方式，比如说，我们在方法外设置一个变量 <code>isBreak</code> ​作为判断是否是否需要打断的依据，在需要打断的地方将 isBreak 设置为 true，当然我们需要在方法的前面放一段特殊的代码。整体代码如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> isBreak;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\">arr.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">item, idnex</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(idnex === <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        isBreak = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(isBreak)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(item);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(item === <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">        isBreak = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>在这个例子中，<code>isBreak</code>​ 用于控制循环是否继续。当遇到 <code>item === 3</code>​ 时，我们将 <code>isBreak</code>​ 设置为 <code>true</code>​，从而在下次迭代时跳过后续的逻辑。</p>\n<p>当然也有一些方法自带打断，例如：</p>\n<ol>\n<li>some 会在存在一个元素符合测试函数时，停止遍历，并且返回 true；</li>\n<li>every 会在存在一个元素不符合测试函数是，停止遍历，并且返回 false；</li>\n<li>find 和 findIndex 会在找到第一个符合的元素时，停止遍历，并且返回值或者索引；</li>\n</ol>\n<h2 id=\"数组迭代方法的异常处理\"><a href=\"#数组迭代方法的异常处理\" class=\"headerlink\" title=\"数组迭代方法的异常处理\"></a>数组迭代方法的异常处理</h2><p>在数组迭代方法的异常处理中通常需要思考的问题主要是，出现异常是否继续执行接下来的迭代，如果需要执行接下来的迭代通常是将 try-catch 防止方法内，如果出现了异常将不需要迭代剩下的元素，就需要将 try-catch 放在方法外。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\">arr.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (item === <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;Something went wrong!&#x27;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(item);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(<span class=\"string\">`Error processing item <span class=\"subst\">$&#123;item&#125;</span>: <span class=\"subst\">$&#123;error.message&#125;</span>`</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 输出:</span></span><br><span class=\"line\"><span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"comment\">// Error processing item 3: Something went wrong!</span></span><br><span class=\"line\"><span class=\"comment\">// 4</span></span><br><span class=\"line\"><span class=\"comment\">// 5</span></span><br></pre></td></tr></table></figure>\n\n<p>在上面的代码中，假设在 item&#x3D;&#x3D;&#x3D;3 的时候出现了一个不是很严重的问题，后续代码可以继续执行。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    arr.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (item === <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;Something went wrong!&#x27;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(item);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(<span class=\"string\">`Iteration stopped due to error: <span class=\"subst\">$&#123;error.message&#125;</span>`</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 输出:</span></span><br><span class=\"line\"><span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"comment\">// Iteration stopped due to error: Something went wrong</span></span><br></pre></td></tr></table></figure>\n\n<p>‍</p>\n","more":"<p><img src=\"https://raw.githubusercontent.com/eeymoo/Eeymoo.github.io/main/images/unsplash-LuiP3ojMg5w-20241231143423-5i448yi.jpg\" alt=\"image\"></p>\n<h1 id=\"数组迭代方法的研究\"><a href=\"#数组迭代方法的研究\" class=\"headerlink\" title=\"数组迭代方法的研究\"></a>数组迭代方法的研究</h1><p>我们知道数组存在一些迭代方法将会遍历数组，在这篇文章中主要研究一些这些方法的相关问题，比如说<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Indexed_collections#%E7%A8%80%E7%96%8F%E6%95%B0%E7%BB%84\">稀疏数组</a>处理方法、如何打断、方法内异常处理等等。</p>\n<h2 id=\"稀疏数组处理方法\"><a href=\"#稀疏数组处理方法\" class=\"headerlink\" title=\"稀疏数组处理方法\"></a>稀疏数组处理方法</h2><p>不同的迭代方法在处理稀疏数组的时候存在不同的方式，在 MDN 中指出，在旧的迭代方法中<strong>处理空槽的方式与处理包含</strong> <strong>​<code>undefined</code>​</strong>​ <strong>索引的方式不同</strong>，而在新的迭代方法中<strong>不会对空槽进行特殊处理，而是将它们视为包含</strong> <strong>​<code>undefined</code>​</strong>​。</p>\n<p>在旧的方法中对空槽的方式是  <strong>“诸如</strong> <strong>​<code>forEach</code>​</strong>​ <strong>之类的迭代方法根本不会访问空槽。其他方法，如</strong> <strong>​<code>concat</code>​</strong>​ <strong>、</strong>​<strong>​<code>copyWithin</code>​</strong>​ <strong>等，在进行复制时会保留空槽，因此最终数组依然是稀疏的。”</strong></p>\n<p>以下数组对数组进行了特殊处理 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/concat\"><code>concat()</code></a>​、<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin\"><code>copyWithin()</code></a>​、<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/every\"><code>every()</code></a>​、<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/filter\"><code>filter()</code></a>​、<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/flat\"><code>flat()</code></a>​、<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/flatMap\"><code>flatMap()</code></a>​、<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach\"><code>forEach()</code></a>​、<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf\"><code>indexOf()</code></a>​、<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf\"><code>lastIndexOf()</code></a>​、<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/map\"><code>map()</code></a>​、<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce\"><code>reduce()</code></a>​、<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight\"><code>reduceRight()</code></a>​、<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse\"><code>reverse()</code></a>​、<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/slice\"><code>slice()</code></a>​、<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/some\"><code>some()</code></a>​、<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/sort\"><code>sort()</code></a>​ 和 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/splice\"><code>splice()</code></a>​。</p>\n<p>不对空槽进行特殊处理的方法，将其视为 <code>undifined</code> ​的方法有：<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/entries\"><code>entries()</code></a>​、<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/fill\"><code>fill()</code></a>​、<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/find\"><code>find()</code></a>​、<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex\"><code>findIndex()</code></a>​、<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/findLast\"><code>findLast()</code></a>​、<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/findLastIndex\"><code>findLastIndex()</code></a>​、<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/includes\"><code>includes()</code></a>​、<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/join\"><code>join()</code></a>​、<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/keys\"><code>keys()</code></a>​、<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/toLocaleString\"><code>toLocaleString()</code></a>​、<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/values\"><code>values()</code></a>​ 和 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/with\"><code>with()</code></a>​。</p>\n<p><strong>引用</strong></p>\n<ol start=\"0\">\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array#%E6%95%B0%E7%BB%84%E6%96%B9%E6%B3%95%E5%92%8C%E7%A9%BA%E6%A7%BD\">MDN - 数组方法和空槽</a></li>\n</ol>\n<h2 id=\"数组迭代方法的打断方式\"><a href=\"#数组迭代方法的打断方式\" class=\"headerlink\" title=\"数组迭代方法的打断方式\"></a>数组迭代方法的打断方式</h2><blockquote>\n<p><strong>如果需要在数组迭代时需要灵活的中断迭代，通常建议使用传统的</strong> <strong>​<code>for</code>​</strong>​<strong>循环或</strong> <strong>​<code>for...of</code>​</strong>​<strong>循环，这样可以更直接地使用</strong> <strong>​<code>break</code>​</strong>​<strong>来中断循环。</strong></p>\n</blockquote>\n<p>当然我们也可以研究一些常见方法的打断方式，比如说，我们在方法外设置一个变量 <code>isBreak</code> ​作为判断是否是否需要打断的依据，在需要打断的地方将 isBreak 设置为 true，当然我们需要在方法的前面放一段特殊的代码。整体代码如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> isBreak;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\">arr.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">item, idnex</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(idnex === <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        isBreak = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(isBreak)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(item);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(item === <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">        isBreak = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>在这个例子中，<code>isBreak</code>​ 用于控制循环是否继续。当遇到 <code>item === 3</code>​ 时，我们将 <code>isBreak</code>​ 设置为 <code>true</code>​，从而在下次迭代时跳过后续的逻辑。</p>\n<p>当然也有一些方法自带打断，例如：</p>\n<ol>\n<li>some 会在存在一个元素符合测试函数时，停止遍历，并且返回 true；</li>\n<li>every 会在存在一个元素不符合测试函数是，停止遍历，并且返回 false；</li>\n<li>find 和 findIndex 会在找到第一个符合的元素时，停止遍历，并且返回值或者索引；</li>\n</ol>\n<h2 id=\"数组迭代方法的异常处理\"><a href=\"#数组迭代方法的异常处理\" class=\"headerlink\" title=\"数组迭代方法的异常处理\"></a>数组迭代方法的异常处理</h2><p>在数组迭代方法的异常处理中通常需要思考的问题主要是，出现异常是否继续执行接下来的迭代，如果需要执行接下来的迭代通常是将 try-catch 防止方法内，如果出现了异常将不需要迭代剩下的元素，就需要将 try-catch 放在方法外。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\">arr.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (item === <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;Something went wrong!&#x27;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(item);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(<span class=\"string\">`Error processing item <span class=\"subst\">$&#123;item&#125;</span>: <span class=\"subst\">$&#123;error.message&#125;</span>`</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 输出:</span></span><br><span class=\"line\"><span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"comment\">// Error processing item 3: Something went wrong!</span></span><br><span class=\"line\"><span class=\"comment\">// 4</span></span><br><span class=\"line\"><span class=\"comment\">// 5</span></span><br></pre></td></tr></table></figure>\n\n<p>在上面的代码中，假设在 item&#x3D;&#x3D;&#x3D;3 的时候出现了一个不是很严重的问题，后续代码可以继续执行。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    arr.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (item === <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;Something went wrong!&#x27;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(item);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(<span class=\"string\">`Iteration stopped due to error: <span class=\"subst\">$&#123;error.message&#125;</span>`</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 输出:</span></span><br><span class=\"line\"><span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"comment\">// Iteration stopped due to error: Something went wrong</span></span><br></pre></td></tr></table></figure>\n\n<p>‍</p>\n"},{"title":"数组交集判断的性能优化：从双循环到双指针的多种方法","date":"2024-12-31T08:47:50.000Z","updated":"2025-01-07T02:48:14.000Z","excerpt":"本文讨论了在权限判断逻辑中，如何优化判断两个数组是否存在交集的方法。首先介绍了双 For 循环的硬计算方法，时间复杂度为 O(n * m)，在性能上较低效。接着，通过使用 `some` 和 `includes` 方法优化了代码，尽管时间复杂度未变，但可读性更好。进一步采用 `Set.has()` 替代 `includes` 提高了效率，因其时间复杂度更低。\n\n此外，介绍了使用双指针算法进行极端优化的思路，但需要对数组进行排序，虽然可能在性能上更优，但开发时间较长。在实际开发时，应根据项目需求平衡开发时间与性能优化，选择合适的方法进行实现。最后，文章提及了参考文献，解释了 `Set.has()` 比 `Array.includes()` 更快的原因。","comments":1,"toc":true,"_content":"\n![image](https://raw.githubusercontent.com/eeymoo/Eeymoo.github.io/main/images/unsplash-IIc73xHTRTg-20241231164817-xj40z5a.jpg)\n\n# 数组是否存在交集的性能优化问题\n\n> 本文使用 `gpt-3.5-turbo`​ 协助完成。\n\n在项目中出现一个这样的权限判断逻辑，存在两个数组，一个是后端返回的所有权限数组，另一个是前端代码中存在的按钮权限数组，我们要判断这两个数组是否存在交集合，如果存在交集就说明具备这个按钮的权限，这个按钮就可以展示。\n\n遇到数组交集的判断存在几种复杂或者简单的思路，一种是硬计算，使用双 for 循环判断，但是这种方式无疑是时间复杂度最大的，也可以使用数组的高阶函数进行判断，这两种时间复杂度相对较高，也可以使用 `Set.has()`​ 进行判断，但是不知道时间复杂度是否会将度，不过这无可厚非，这也是一种简单的写法，最起码代码便简单了，看起来更舒服，当然也存在一些高阶算法写法，比如双指针算法，会极大程度降低时间复杂度，不过暂时不考虑。\n\n## 双 For 循环硬计算\n\n我们已知双 For 循环的时间复杂度是 O(n * m)，这里的 n 和 m 分别是两个数组的长度。\n\n```js\nconst hasIntersection (arr1, arr2) => {\n    for (let i = 0; i < arr1.length; i++) { // 遍历第一个数组\n        for (let j = 0; j < arr2.length; j++) { // 遍历第二个数组\n            if (arr1[i] === arr2[j]) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n```\n\n## 使用 `some`​ 和 `includes`​\n\n我们可以使用 `some`​ 和 `includes`​ 优化代码，时间复杂度同上，但是代码更加简洁。\n\n```js\nconst hasIntersection (arr1, arr2) => {\n\treturn arr.some(\n\t\titem => arr2.includes(item)\n\t);\n}\n```\n\n## 使用 `Set.has`​ 和 `some`​\n\n当然我们也可使用 `Set.has`​ 来代替 `includes`​，而且 `Set.has`​ 的时间复杂度更低。\n\n```js\n‍const hasIntersection (arr1, arr2) => {\n\tconst set = new Set(arr1);\n\treturn arr.some(\n\t\titem => set.has(item)\n\t);\n}\n```\n\n当然在考虑 `includes`​ 和 `Set.has`​ 复杂度的时候也要考虑其他内容，比如说数据集的大小，内容重复度之类，这里不做考虑，不过可以研究，详见参考内容。\n\n## 双指针算法\n\n在极端优化情况下可以使用双指针算法解决这类问题，当然在日常开发中，通常使用上述方法就可以解决问题，简单相对高效，没必要求极端性能，不过这里也给出极端思路解决。\n\n```js\n// 首先如果使用双指针算法解决这个问题首先要对内容进行排序，排序也要使用算法排序\n// 我们这里不考虑排序算法，并且假定内容为数字\nconst hasIntersection = (arr1, arr2) => {\n\tlet sortArr1 = sort(arr1);\n\tlet sortArr2 = sort(arr2);\n\tlet current1 = 0;\n\tlet current2 = 0;\n\twhile (current1 < sortArr1.length && current2 < sortArr2.length) {\n\t\tif (sortArr1[current1] < sortArr2[current2]) {\n\t\t\tcurrent1 ++;\n\t\t} \n\t\telse if (sortArr1[current1] > sortArr2[current2]) {\n\t\t\tcurrent2 ++;\n\t\t} \n\t\telse {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\n\nconst sort = (arr) => arr.sort((a, b) => a - b);\n\nconst nums1 = [1, 2, 4, 7, 8, 10, 12];\nconst nums2 = [3, 4, 8, 9];\n\nconsole.log(hasIntersection(nums1, nums2));\n```\n\n在实际解决问题中要是用开发时间短，性能较好的内容，没必要使用性能特别好，但是开发时间较长的内容（特殊行业除外），我们要结合项目的实际需要实现这样的功能，开发也是妥协的艺术，做开发时间和性能的妥协。\n\n‍\n\n参考文献：\n\n1. [性能对比：为什么 Set.has() 比 Array.includes() 更快？](https://blog.csdn.net/qq_41865545/article/details/143502905)\n","source":"_posts/shu-zu-shi-fou-cun-zai-jiao-ji-de-xing-neng-you-hua-wen-ti-z1kwfix.md","raw":"---\ntitle: 数组交集判断的性能优化：从双循环到双指针的多种方法\ndate: '2024-12-31 16:47:50'\nupdated: '2025-01-07 10:48:14'\nexcerpt: >-\n  本文讨论了在权限判断逻辑中，如何优化判断两个数组是否存在交集的方法。首先介绍了双 For 循环的硬计算方法，时间复杂度为 O(n *\n  m)，在性能上较低效。接着，通过使用 `some` 和 `includes` 方法优化了代码，尽管时间复杂度未变，但可读性更好。进一步采用\n  `Set.has()` 替代 `includes` 提高了效率，因其时间复杂度更低。\n\n\n  此外，介绍了使用双指针算法进行极端优化的思路，但需要对数组进行排序，虽然可能在性能上更优，但开发时间较长。在实际开发时，应根据项目需求平衡开发时间与性能优化，选择合适的方法进行实现。最后，文章提及了参考文献，解释了\n  `Set.has()` 比 `Array.includes()` 更快的原因。\ntags:\n  - 性能优化\n  - 开发技巧\ncategories:\n  - JavaScript\npermalink: /post/shu-zu-shi-fou-cun-zai-jiao-ji-de-xing-neng-you-hua-wen-ti-z1kwfix.html\ncomments: true\ntoc: true\n---\n\n![image](https://raw.githubusercontent.com/eeymoo/Eeymoo.github.io/main/images/unsplash-IIc73xHTRTg-20241231164817-xj40z5a.jpg)\n\n# 数组是否存在交集的性能优化问题\n\n> 本文使用 `gpt-3.5-turbo`​ 协助完成。\n\n在项目中出现一个这样的权限判断逻辑，存在两个数组，一个是后端返回的所有权限数组，另一个是前端代码中存在的按钮权限数组，我们要判断这两个数组是否存在交集合，如果存在交集就说明具备这个按钮的权限，这个按钮就可以展示。\n\n遇到数组交集的判断存在几种复杂或者简单的思路，一种是硬计算，使用双 for 循环判断，但是这种方式无疑是时间复杂度最大的，也可以使用数组的高阶函数进行判断，这两种时间复杂度相对较高，也可以使用 `Set.has()`​ 进行判断，但是不知道时间复杂度是否会将度，不过这无可厚非，这也是一种简单的写法，最起码代码便简单了，看起来更舒服，当然也存在一些高阶算法写法，比如双指针算法，会极大程度降低时间复杂度，不过暂时不考虑。\n\n## 双 For 循环硬计算\n\n我们已知双 For 循环的时间复杂度是 O(n * m)，这里的 n 和 m 分别是两个数组的长度。\n\n```js\nconst hasIntersection (arr1, arr2) => {\n    for (let i = 0; i < arr1.length; i++) { // 遍历第一个数组\n        for (let j = 0; j < arr2.length; j++) { // 遍历第二个数组\n            if (arr1[i] === arr2[j]) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n```\n\n## 使用 `some`​ 和 `includes`​\n\n我们可以使用 `some`​ 和 `includes`​ 优化代码，时间复杂度同上，但是代码更加简洁。\n\n```js\nconst hasIntersection (arr1, arr2) => {\n\treturn arr.some(\n\t\titem => arr2.includes(item)\n\t);\n}\n```\n\n## 使用 `Set.has`​ 和 `some`​\n\n当然我们也可使用 `Set.has`​ 来代替 `includes`​，而且 `Set.has`​ 的时间复杂度更低。\n\n```js\n‍const hasIntersection (arr1, arr2) => {\n\tconst set = new Set(arr1);\n\treturn arr.some(\n\t\titem => set.has(item)\n\t);\n}\n```\n\n当然在考虑 `includes`​ 和 `Set.has`​ 复杂度的时候也要考虑其他内容，比如说数据集的大小，内容重复度之类，这里不做考虑，不过可以研究，详见参考内容。\n\n## 双指针算法\n\n在极端优化情况下可以使用双指针算法解决这类问题，当然在日常开发中，通常使用上述方法就可以解决问题，简单相对高效，没必要求极端性能，不过这里也给出极端思路解决。\n\n```js\n// 首先如果使用双指针算法解决这个问题首先要对内容进行排序，排序也要使用算法排序\n// 我们这里不考虑排序算法，并且假定内容为数字\nconst hasIntersection = (arr1, arr2) => {\n\tlet sortArr1 = sort(arr1);\n\tlet sortArr2 = sort(arr2);\n\tlet current1 = 0;\n\tlet current2 = 0;\n\twhile (current1 < sortArr1.length && current2 < sortArr2.length) {\n\t\tif (sortArr1[current1] < sortArr2[current2]) {\n\t\t\tcurrent1 ++;\n\t\t} \n\t\telse if (sortArr1[current1] > sortArr2[current2]) {\n\t\t\tcurrent2 ++;\n\t\t} \n\t\telse {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\n\nconst sort = (arr) => arr.sort((a, b) => a - b);\n\nconst nums1 = [1, 2, 4, 7, 8, 10, 12];\nconst nums2 = [3, 4, 8, 9];\n\nconsole.log(hasIntersection(nums1, nums2));\n```\n\n在实际解决问题中要是用开发时间短，性能较好的内容，没必要使用性能特别好，但是开发时间较长的内容（特殊行业除外），我们要结合项目的实际需要实现这样的功能，开发也是妥协的艺术，做开发时间和性能的妥协。\n\n‍\n\n参考文献：\n\n1. [性能对比：为什么 Set.has() 比 Array.includes() 更快？](https://blog.csdn.net/qq_41865545/article/details/143502905)\n","slug":"shu-zu-shi-fou-cun-zai-jiao-ji-de-xing-neng-you-hua-wen-ti-z1kwfix","published":1,"__permalink":"/post/shu-zu-shi-fou-cun-zai-jiao-ji-de-xing-neng-you-hua-wen-ti-z1kwfix.html","layout":"post","photos":[],"_id":"cm5m2db0l0001tsnv07pn3szc","content":"<p><img src=\"https://raw.githubusercontent.com/eeymoo/Eeymoo.github.io/main/images/unsplash-IIc73xHTRTg-20241231164817-xj40z5a.jpg\" alt=\"image\"></p>\n<h1 id=\"数组是否存在交集的性能优化问题\"><a href=\"#数组是否存在交集的性能优化问题\" class=\"headerlink\" title=\"数组是否存在交集的性能优化问题\"></a>数组是否存在交集的性能优化问题</h1><blockquote>\n<p>本文使用 <code>gpt-3.5-turbo</code>​ 协助完成。</p>\n</blockquote>\n<p>在项目中出现一个这样的权限判断逻辑，存在两个数组，一个是后端返回的所有权限数组，另一个是前端代码中存在的按钮权限数组，我们要判断这两个数组是否存在交集合，如果存在交集就说明具备这个按钮的权限，这个按钮就可以展示。</p>\n<p>遇到数组交集的判断存在几种复杂或者简单的思路，一种是硬计算，使用双 for 循环判断，但是这种方式无疑是时间复杂度最大的，也可以使用数组的高阶函数进行判断，这两种时间复杂度相对较高，也可以使用 <code>Set.has()</code>​ 进行判断，但是不知道时间复杂度是否会将度，不过这无可厚非，这也是一种简单的写法，最起码代码便简单了，看起来更舒服，当然也存在一些高阶算法写法，比如双指针算法，会极大程度降低时间复杂度，不过暂时不考虑。</p>\n<h2 id=\"双-For-循环硬计算\"><a href=\"#双-For-循环硬计算\" class=\"headerlink\" title=\"双 For 循环硬计算\"></a>双 For 循环硬计算</h2><p>我们已知双 For 循环的时间复杂度是 O(n * m)，这里的 n 和 m 分别是两个数组的长度。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">hasIntersection</span> (arr1, arr2) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; arr1.<span class=\"property\">length</span>; i++) &#123; <span class=\"comment\">// 遍历第一个数组</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = <span class=\"number\">0</span>; j &lt; arr2.<span class=\"property\">length</span>; j++) &#123; <span class=\"comment\">// 遍历第二个数组</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (arr1[i] === arr2[j]) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用-some​-和-includes​\"><a href=\"#使用-some​-和-includes​\" class=\"headerlink\" title=\"使用 some​ 和 includes​\"></a>使用 <code>some</code>​ 和 <code>includes</code>​</h2><p>我们可以使用 <code>some</code>​ 和 <code>includes</code>​ 优化代码，时间复杂度同上，但是代码更加简洁。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">hasIntersection</span> (arr1, arr2) =&gt; &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> arr.<span class=\"title function_\">some</span>(</span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> arr2.<span class=\"title function_\">includes</span>(item)</span><br><span class=\"line\">\t);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用-Set-has​-和-some​\"><a href=\"#使用-Set-has​-和-some​\" class=\"headerlink\" title=\"使用 Set.has​ 和 some​\"></a>使用 <code>Set.has</code>​ 和 <code>some</code>​</h2><p>当然我们也可使用 <code>Set.has</code>​ 来代替 <code>includes</code>​，而且 <code>Set.has</code>​ 的时间复杂度更低。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">‍<span class=\"keyword\">const</span> <span class=\"title function_\">hasIntersection</span> (arr1, arr2) =&gt; &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> set = <span class=\"keyword\">new</span> <span class=\"title class_\">Set</span>(arr1);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> arr.<span class=\"title function_\">some</span>(</span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> set.<span class=\"title function_\">has</span>(item)</span><br><span class=\"line\">\t);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当然在考虑 <code>includes</code>​ 和 <code>Set.has</code>​ 复杂度的时候也要考虑其他内容，比如说数据集的大小，内容重复度之类，这里不做考虑，不过可以研究，详见参考内容。</p>\n<h2 id=\"双指针算法\"><a href=\"#双指针算法\" class=\"headerlink\" title=\"双指针算法\"></a>双指针算法</h2><p>在极端优化情况下可以使用双指针算法解决这类问题，当然在日常开发中，通常使用上述方法就可以解决问题，简单相对高效，没必要求极端性能，不过这里也给出极端思路解决。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 首先如果使用双指针算法解决这个问题首先要对内容进行排序，排序也要使用算法排序</span></span><br><span class=\"line\"><span class=\"comment\">// 我们这里不考虑排序算法，并且假定内容为数字</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">hasIntersection</span> = (<span class=\"params\">arr1, arr2</span>) =&gt; &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> sortArr1 = <span class=\"title function_\">sort</span>(arr1);</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> sortArr2 = <span class=\"title function_\">sort</span>(arr2);</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> current1 = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> current2 = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (current1 &lt; sortArr1.<span class=\"property\">length</span> &amp;&amp; current2 &lt; sortArr2.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (sortArr1[current1] &lt; sortArr2[current2]) &#123;</span><br><span class=\"line\">\t\t\tcurrent1 ++;</span><br><span class=\"line\">\t\t&#125; </span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (sortArr1[current1] &gt; sortArr2[current2]) &#123;</span><br><span class=\"line\">\t\t\tcurrent2 ++;</span><br><span class=\"line\">\t\t&#125; </span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">sort</span> = (<span class=\"params\">arr</span>) =&gt; arr.<span class=\"title function_\">sort</span>(<span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> a - b);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> nums1 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">10</span>, <span class=\"number\">12</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> nums2 = [<span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">hasIntersection</span>(nums1, nums2));</span><br></pre></td></tr></table></figure>\n\n<p>在实际解决问题中要是用开发时间短，性能较好的内容，没必要使用性能特别好，但是开发时间较长的内容（特殊行业除外），我们要结合项目的实际需要实现这样的功能，开发也是妥协的艺术，做开发时间和性能的妥协。</p>\n<p>‍</p>\n<p>参考文献：</p>\n<ol>\n<li><a href=\"https://blog.csdn.net/qq_41865545/article/details/143502905\">性能对比：为什么 Set.has() 比 Array.includes() 更快？</a></li>\n</ol>\n","more":"<p><img src=\"https://raw.githubusercontent.com/eeymoo/Eeymoo.github.io/main/images/unsplash-IIc73xHTRTg-20241231164817-xj40z5a.jpg\" alt=\"image\"></p>\n<h1 id=\"数组是否存在交集的性能优化问题\"><a href=\"#数组是否存在交集的性能优化问题\" class=\"headerlink\" title=\"数组是否存在交集的性能优化问题\"></a>数组是否存在交集的性能优化问题</h1><blockquote>\n<p>本文使用 <code>gpt-3.5-turbo</code>​ 协助完成。</p>\n</blockquote>\n<p>在项目中出现一个这样的权限判断逻辑，存在两个数组，一个是后端返回的所有权限数组，另一个是前端代码中存在的按钮权限数组，我们要判断这两个数组是否存在交集合，如果存在交集就说明具备这个按钮的权限，这个按钮就可以展示。</p>\n<p>遇到数组交集的判断存在几种复杂或者简单的思路，一种是硬计算，使用双 for 循环判断，但是这种方式无疑是时间复杂度最大的，也可以使用数组的高阶函数进行判断，这两种时间复杂度相对较高，也可以使用 <code>Set.has()</code>​ 进行判断，但是不知道时间复杂度是否会将度，不过这无可厚非，这也是一种简单的写法，最起码代码便简单了，看起来更舒服，当然也存在一些高阶算法写法，比如双指针算法，会极大程度降低时间复杂度，不过暂时不考虑。</p>\n<h2 id=\"双-For-循环硬计算\"><a href=\"#双-For-循环硬计算\" class=\"headerlink\" title=\"双 For 循环硬计算\"></a>双 For 循环硬计算</h2><p>我们已知双 For 循环的时间复杂度是 O(n * m)，这里的 n 和 m 分别是两个数组的长度。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">hasIntersection</span> (arr1, arr2) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; arr1.<span class=\"property\">length</span>; i++) &#123; <span class=\"comment\">// 遍历第一个数组</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = <span class=\"number\">0</span>; j &lt; arr2.<span class=\"property\">length</span>; j++) &#123; <span class=\"comment\">// 遍历第二个数组</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (arr1[i] === arr2[j]) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用-some​-和-includes​\"><a href=\"#使用-some​-和-includes​\" class=\"headerlink\" title=\"使用 some​ 和 includes​\"></a>使用 <code>some</code>​ 和 <code>includes</code>​</h2><p>我们可以使用 <code>some</code>​ 和 <code>includes</code>​ 优化代码，时间复杂度同上，但是代码更加简洁。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">hasIntersection</span> (arr1, arr2) =&gt; &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> arr.<span class=\"title function_\">some</span>(</span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> arr2.<span class=\"title function_\">includes</span>(item)</span><br><span class=\"line\">\t);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用-Set-has​-和-some​\"><a href=\"#使用-Set-has​-和-some​\" class=\"headerlink\" title=\"使用 Set.has​ 和 some​\"></a>使用 <code>Set.has</code>​ 和 <code>some</code>​</h2><p>当然我们也可使用 <code>Set.has</code>​ 来代替 <code>includes</code>​，而且 <code>Set.has</code>​ 的时间复杂度更低。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">‍<span class=\"keyword\">const</span> <span class=\"title function_\">hasIntersection</span> (arr1, arr2) =&gt; &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> set = <span class=\"keyword\">new</span> <span class=\"title class_\">Set</span>(arr1);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> arr.<span class=\"title function_\">some</span>(</span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> set.<span class=\"title function_\">has</span>(item)</span><br><span class=\"line\">\t);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当然在考虑 <code>includes</code>​ 和 <code>Set.has</code>​ 复杂度的时候也要考虑其他内容，比如说数据集的大小，内容重复度之类，这里不做考虑，不过可以研究，详见参考内容。</p>\n<h2 id=\"双指针算法\"><a href=\"#双指针算法\" class=\"headerlink\" title=\"双指针算法\"></a>双指针算法</h2><p>在极端优化情况下可以使用双指针算法解决这类问题，当然在日常开发中，通常使用上述方法就可以解决问题，简单相对高效，没必要求极端性能，不过这里也给出极端思路解决。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 首先如果使用双指针算法解决这个问题首先要对内容进行排序，排序也要使用算法排序</span></span><br><span class=\"line\"><span class=\"comment\">// 我们这里不考虑排序算法，并且假定内容为数字</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">hasIntersection</span> = (<span class=\"params\">arr1, arr2</span>) =&gt; &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> sortArr1 = <span class=\"title function_\">sort</span>(arr1);</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> sortArr2 = <span class=\"title function_\">sort</span>(arr2);</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> current1 = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> current2 = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (current1 &lt; sortArr1.<span class=\"property\">length</span> &amp;&amp; current2 &lt; sortArr2.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (sortArr1[current1] &lt; sortArr2[current2]) &#123;</span><br><span class=\"line\">\t\t\tcurrent1 ++;</span><br><span class=\"line\">\t\t&#125; </span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (sortArr1[current1] &gt; sortArr2[current2]) &#123;</span><br><span class=\"line\">\t\t\tcurrent2 ++;</span><br><span class=\"line\">\t\t&#125; </span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">sort</span> = (<span class=\"params\">arr</span>) =&gt; arr.<span class=\"title function_\">sort</span>(<span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> a - b);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> nums1 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">10</span>, <span class=\"number\">12</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> nums2 = [<span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">hasIntersection</span>(nums1, nums2));</span><br></pre></td></tr></table></figure>\n\n<p>在实际解决问题中要是用开发时间短，性能较好的内容，没必要使用性能特别好，但是开发时间较长的内容（特殊行业除外），我们要结合项目的实际需要实现这样的功能，开发也是妥协的艺术，做开发时间和性能的妥协。</p>\n<p>‍</p>\n<p>参考文献：</p>\n<ol>\n<li><a href=\"https://blog.csdn.net/qq_41865545/article/details/143502905\">性能对比：为什么 Set.has() 比 Array.includes() 更快？</a></li>\n</ol>\n"},{"title":"CSS选择器优先级计算规则及其最佳实践","date":"2024-12-31T06:09:00.000Z","updated":"2025-01-07T02:06:42.000Z","excerpt":"这篇文章深入探讨了CSS选择器的优先级计算规则。作者首先介绍了W3C对CSS选择器特异性的定义，明确选择器可分为三个等级：A（ID选择器）、B（类选择器、属性选择器和伪类）和C（类型选择器和伪元素）。重点在于学习如何精确计算优先级。重复使用简单选择器会增加优先级，并且一些特殊选择器如`:is()`、`:not()`和`:where()`具有独特的优先级计算规则。\n\n文章指出，不同选择器的优先级不是简单的求和，而是独立计算，强调权值不能进位。对于 `!important` 的使用则被建议要谨慎，优先考虑样式规则的优先级解决方案。在最后，文章列出了一些CSS优先规则，包括近祖先样式和直接样式的优先级，以及总结了选择器的优先级顺序。整体上，这篇文章对CSS优先级的理解及应用提供了全面而系统的指导。","comments":1,"toc":true,"_content":"\n![image](https://raw.githubusercontent.com/eeymoo/Eeymoo.github.io/main/images/unsplash-G6VCCOdOCzY-20250107101324-1fqosg5.jpg)\n\n# CSS选择器优先级计算规则及其最佳实践\n\nCSS优先级是一个值得思考的问题，再次之前我对CSS优先级的理解是:\n\n> !important>内联样式>ID选择器>类选择器>类型选择器\n\n相信很多人对CSS优先级的理解也是这样的，但是一篇文章([CSS选择器的优先级（精讲版） (biancheng.net)](http://c.biancheng.net/view/7216.html))上面书写了关于**CSS 选择器优先级的计算规则**的内容，使我开始对CSS优先级进行重新研究。\n\n根据W3C给出关于选择器特异性(specificity，国内一般称优先级)的解释，选择器分为ABC三个等级，其中A为ID选择器，B包括类选择器、属性选择器和伪类，C包括类型选择器和伪元素，当然还存在一个通用选择器，但是通用选择器一般忽略。\n\n|等级|包含选择器|\n| ----| --------------------------------------------|\n|A|计算选择器中 ID 选择器的数量|\n|B|计算选择器中类选择器、属性选择器和伪类的数量|\n|C|计算选择器中类型选择器和伪元素的数量|\n\n优先级的计算，从A级开始到C级结束，如果到C级是两个选择器的优先级还是相等的那么有限选择靠后的选择器。\n\n### 重复简单选择器\n\nCSS选择器允许重复出现简单选择器，并且简单选择器的重复出现会增加优先级。\n\n```css\n.class.class{\n    background-color: red;\n}\n\n.class{\n    background-color: green;\n}\n```\n\n也就是说如上代码中第一个选择器重复出现了`.class`选择器，第二个选择器只出现了一个`.class`选择器，这两种写法都是正确的，并且第一个选择器`.class.class`的优先级大于第二个选择器`.class`，所以结果是背景颜色将呈现红色。\n\n|选择器|优先级 (A, B, C)|\n| ------------| ----------------|\n|.class.class|(0, 2, 0)|\n|.class|(0, 1, 0)|\n\n> 在低版本CSS中可能简单重复选择器会被忽略，如在ie8中重复id或被忽略，在ie5中重复的class或被忽略。\n>\n> 拒绝IE，从我做起！\n\n### 特殊选择器\n\n一些伪类和其他选择器中存在一些特殊的选择器，因此单独定义了这些特殊选择器的特异性。\n\n1. 选择器`:is()`、`:not()`、`:has()`的优先级是选择器列表中最具有复杂性的选择器的优先级取代。\n2. 选择器`:nth-child()`、`:nth-last-child()`的优先级是伪类本身的优先级（计为一个伪类选择器，也就是计为B），再加上选择器列表中最具复杂性的选择器的优先级。\n3. 选择器`:where()`伪类的优先级被零代替，也就是没有优先级，再优先级计算中不做数。\n4. 通用选择符以及其他选择符在优先级中不计数。\n\n### 优先级计算\n\n|选择器|优先级 (A, B, C)|\n| ----------------------------------------------------| ------------------|\n|.class|(0, 1, 0)|\n|​#Red#​|(1, 0, 0)|\n|.container :is(.container>#Red, .container>.class)|(1, 2, 0)|\n|.container #Red.class:nth-child(1)#​|(1, 3, 0)|\n|:is(.container>.class.class)|(0, 3, 0)|\n|​#Red:is(.container&gt;.class)#​|(1, 2, 0)|\n|.container div:nth-child(1)|(0, 2, 1)|\n|:is(#Red.class)|(1, 1, 0)|\n|​#Red.class#​|(1, 1, 0)|\n|​#Red.class:nth-child(1)#​|(1, 2, 0)|\n|​#Red#​Red|(2, 0, 0)|\n\n[代码片段](https://code.juejin.cn/pen/7103862825264611359)\n\n[codepen](https://codepen.io/onemue/pen/RwQMBmd)\n\n### specificity求和\n\n在一些其他文档中将讲A、B、C分别比作100,10,1 进行求和，是不准确的，如果按照这样做那么10个class是不是相当于一个id，显然不是。\n\n在[CSS Level 1](https://www.w3.org/TR/CSS1/#cascading-order)、[Selectors Level 3](https://drafts.csswg.org/selectors-3/#specificity)中也有这样的描述。\n\n在主流浏览器中高等级高于低等级是即使ABC求和相同也不会优先使用后声明的CSS。\n\n造成这样的原因是**权重的进制是并不是十进制，CSS 权重进制在 IE6 为 256，后来扩大到了 65536，现代浏览器则采用更大的数量**。也可以理解**选择器的权值不能进位**，或者理解为选择器权值ABC单独计算比较。\n\n### 关于`!important `\n\nMDN指出“使用 `!important` 是一个**坏习惯**，应该尽量避免”，并给出了使用`!important` 的情况：\n\n- **一定**要优先考虑使用样式规则的优先级来解决问题而不是 `!important`\n- **只有**在需要覆盖全站或外部 CSS 的特定页面中使用 `!important`\n- **永远不要**在你的插件中使用 `!important`\n- **永远不要**在全站范围的 CSS 代码中使用 `!important`\n\n以及替代 `!important`的方法:\n\n1. 更好地利用 CSS 级联属性\n2. 使用更具体的规则。在您选择的元素之前，增加一个或多个其他元素，使选择器变得更加具体，并获得更高的优先级。\n3. 对于（2）的一种特殊情况，当您无其他要指定的内容时，请复制简单的选择器以增加特异性。\n\n推荐阅读[优先级 - CSS（层叠样式表） | MDN (mozilla.org)](https://developer.mozilla.org/zh-CN/docs/Web/CSS/Specificity#!important_例外规则)，了解更多`!important`的使用意见。\n\n### 其他 CSS 优先规则\n\n**CSS 优先规则1：**  最近的祖先样式比其他祖先样式优先级高。\n\n**CSS 优先规则2：**  \"直接样式\"比\"祖先样式\"优先级高。\n\n**CSS 优先规则3：**  优先级关系：内联样式 > ID 选择器 > 类选择器 = 属性选择器 = 伪类选择器 > 标签选择器 = 伪元素选择器。\n\n**CSS 优先规则4：**  计算选择符中 ID 选择器的个数（a），计算选择符中类选择器、属性选择器以及伪类选择器的个数之和（b），计算选择符中标签选择器和伪元素选择器的个数之和（c）。按 a、b、c 的顺序依次比较大小，大的则优先级高，相等则比较下一个。若最后两个的选择符中 a、b、c 都相等，则按照\"就近原则\"来判断。\n\n**CSS 优先规则5：**  属性后插有  **!important** 的属性拥有最高优先级。若同时插有  **!important**，则再利用规则 3、4 判断优先级。\n\n> 注意: 文档树中元素的接近度（[Proximity of elements](https://developer.mozilla.org/zh-CN/docs/Web/CSS/Specificity#无视DOM树中的距离)）对优先级没有影响。\n\n### 参考文献\n\n1. [Selectors Level 4](http://www.w3.org/TR/selectors/#specificity)\n2. [优先级 - CSS（层叠样式表） | MDN (mozilla.org)](https://developer.mozilla.org/zh-CN/docs/Web/CSS/Specificity)\n3. [CSS 样式优先级 | 菜鸟教程 (runoob.com)](https://www.runoob.com/w3cnote/css-style-priority.html)\n","source":"_posts/talk-about-the-calculation-rules-of-the-priority-of-css-selector-priority-z2qeyfl.md","raw":"---\ntitle: CSS选择器优先级计算规则及其最佳实践\ndate: '2024-12-31 14:09:00'\nupdated: '2025-01-07 10:06:42'\nexcerpt: >-\n  这篇文章深入探讨了CSS选择器的优先级计算规则。作者首先介绍了W3C对CSS选择器特异性的定义，明确选择器可分为三个等级：A（ID选择器）、B（类选择器、属性选择器和伪类）和C（类型选择器和伪元素）。重点在于学习如何精确计算优先级。重复使用简单选择器会增加优先级，并且一些特殊选择器如`:is()`、`:not()`和`:where()`具有独特的优先级计算规则。\n\n\n  文章指出，不同选择器的优先级不是简单的求和，而是独立计算，强调权值不能进位。对于 `!important`\n  的使用则被建议要谨慎，优先考虑样式规则的优先级解决方案。在最后，文章列出了一些CSS优先规则，包括近祖先样式和直接样式的优先级，以及总结了选择器的优先级顺序。整体上，这篇文章对CSS优先级的理解及应用提供了全面而系统的指导。\ntags:\n  - CSS\n  - 选择器\n  - 样式\npermalink: >-\n  /post/talk-about-the-calculation-rules-of-the-priority-of-css-selector-priority-z2qeyfl.html\ncomments: true\ntoc: true\n---\n\n![image](https://raw.githubusercontent.com/eeymoo/Eeymoo.github.io/main/images/unsplash-G6VCCOdOCzY-20250107101324-1fqosg5.jpg)\n\n# CSS选择器优先级计算规则及其最佳实践\n\nCSS优先级是一个值得思考的问题，再次之前我对CSS优先级的理解是:\n\n> !important>内联样式>ID选择器>类选择器>类型选择器\n\n相信很多人对CSS优先级的理解也是这样的，但是一篇文章([CSS选择器的优先级（精讲版） (biancheng.net)](http://c.biancheng.net/view/7216.html))上面书写了关于**CSS 选择器优先级的计算规则**的内容，使我开始对CSS优先级进行重新研究。\n\n根据W3C给出关于选择器特异性(specificity，国内一般称优先级)的解释，选择器分为ABC三个等级，其中A为ID选择器，B包括类选择器、属性选择器和伪类，C包括类型选择器和伪元素，当然还存在一个通用选择器，但是通用选择器一般忽略。\n\n|等级|包含选择器|\n| ----| --------------------------------------------|\n|A|计算选择器中 ID 选择器的数量|\n|B|计算选择器中类选择器、属性选择器和伪类的数量|\n|C|计算选择器中类型选择器和伪元素的数量|\n\n优先级的计算，从A级开始到C级结束，如果到C级是两个选择器的优先级还是相等的那么有限选择靠后的选择器。\n\n### 重复简单选择器\n\nCSS选择器允许重复出现简单选择器，并且简单选择器的重复出现会增加优先级。\n\n```css\n.class.class{\n    background-color: red;\n}\n\n.class{\n    background-color: green;\n}\n```\n\n也就是说如上代码中第一个选择器重复出现了`.class`选择器，第二个选择器只出现了一个`.class`选择器，这两种写法都是正确的，并且第一个选择器`.class.class`的优先级大于第二个选择器`.class`，所以结果是背景颜色将呈现红色。\n\n|选择器|优先级 (A, B, C)|\n| ------------| ----------------|\n|.class.class|(0, 2, 0)|\n|.class|(0, 1, 0)|\n\n> 在低版本CSS中可能简单重复选择器会被忽略，如在ie8中重复id或被忽略，在ie5中重复的class或被忽略。\n>\n> 拒绝IE，从我做起！\n\n### 特殊选择器\n\n一些伪类和其他选择器中存在一些特殊的选择器，因此单独定义了这些特殊选择器的特异性。\n\n1. 选择器`:is()`、`:not()`、`:has()`的优先级是选择器列表中最具有复杂性的选择器的优先级取代。\n2. 选择器`:nth-child()`、`:nth-last-child()`的优先级是伪类本身的优先级（计为一个伪类选择器，也就是计为B），再加上选择器列表中最具复杂性的选择器的优先级。\n3. 选择器`:where()`伪类的优先级被零代替，也就是没有优先级，再优先级计算中不做数。\n4. 通用选择符以及其他选择符在优先级中不计数。\n\n### 优先级计算\n\n|选择器|优先级 (A, B, C)|\n| ----------------------------------------------------| ------------------|\n|.class|(0, 1, 0)|\n|​#Red#​|(1, 0, 0)|\n|.container :is(.container>#Red, .container>.class)|(1, 2, 0)|\n|.container #Red.class:nth-child(1)#​|(1, 3, 0)|\n|:is(.container>.class.class)|(0, 3, 0)|\n|​#Red:is(.container&gt;.class)#​|(1, 2, 0)|\n|.container div:nth-child(1)|(0, 2, 1)|\n|:is(#Red.class)|(1, 1, 0)|\n|​#Red.class#​|(1, 1, 0)|\n|​#Red.class:nth-child(1)#​|(1, 2, 0)|\n|​#Red#​Red|(2, 0, 0)|\n\n[代码片段](https://code.juejin.cn/pen/7103862825264611359)\n\n[codepen](https://codepen.io/onemue/pen/RwQMBmd)\n\n### specificity求和\n\n在一些其他文档中将讲A、B、C分别比作100,10,1 进行求和，是不准确的，如果按照这样做那么10个class是不是相当于一个id，显然不是。\n\n在[CSS Level 1](https://www.w3.org/TR/CSS1/#cascading-order)、[Selectors Level 3](https://drafts.csswg.org/selectors-3/#specificity)中也有这样的描述。\n\n在主流浏览器中高等级高于低等级是即使ABC求和相同也不会优先使用后声明的CSS。\n\n造成这样的原因是**权重的进制是并不是十进制，CSS 权重进制在 IE6 为 256，后来扩大到了 65536，现代浏览器则采用更大的数量**。也可以理解**选择器的权值不能进位**，或者理解为选择器权值ABC单独计算比较。\n\n### 关于`!important `\n\nMDN指出“使用 `!important` 是一个**坏习惯**，应该尽量避免”，并给出了使用`!important` 的情况：\n\n- **一定**要优先考虑使用样式规则的优先级来解决问题而不是 `!important`\n- **只有**在需要覆盖全站或外部 CSS 的特定页面中使用 `!important`\n- **永远不要**在你的插件中使用 `!important`\n- **永远不要**在全站范围的 CSS 代码中使用 `!important`\n\n以及替代 `!important`的方法:\n\n1. 更好地利用 CSS 级联属性\n2. 使用更具体的规则。在您选择的元素之前，增加一个或多个其他元素，使选择器变得更加具体，并获得更高的优先级。\n3. 对于（2）的一种特殊情况，当您无其他要指定的内容时，请复制简单的选择器以增加特异性。\n\n推荐阅读[优先级 - CSS（层叠样式表） | MDN (mozilla.org)](https://developer.mozilla.org/zh-CN/docs/Web/CSS/Specificity#!important_例外规则)，了解更多`!important`的使用意见。\n\n### 其他 CSS 优先规则\n\n**CSS 优先规则1：**  最近的祖先样式比其他祖先样式优先级高。\n\n**CSS 优先规则2：**  \"直接样式\"比\"祖先样式\"优先级高。\n\n**CSS 优先规则3：**  优先级关系：内联样式 > ID 选择器 > 类选择器 = 属性选择器 = 伪类选择器 > 标签选择器 = 伪元素选择器。\n\n**CSS 优先规则4：**  计算选择符中 ID 选择器的个数（a），计算选择符中类选择器、属性选择器以及伪类选择器的个数之和（b），计算选择符中标签选择器和伪元素选择器的个数之和（c）。按 a、b、c 的顺序依次比较大小，大的则优先级高，相等则比较下一个。若最后两个的选择符中 a、b、c 都相等，则按照\"就近原则\"来判断。\n\n**CSS 优先规则5：**  属性后插有  **!important** 的属性拥有最高优先级。若同时插有  **!important**，则再利用规则 3、4 判断优先级。\n\n> 注意: 文档树中元素的接近度（[Proximity of elements](https://developer.mozilla.org/zh-CN/docs/Web/CSS/Specificity#无视DOM树中的距离)）对优先级没有影响。\n\n### 参考文献\n\n1. [Selectors Level 4](http://www.w3.org/TR/selectors/#specificity)\n2. [优先级 - CSS（层叠样式表） | MDN (mozilla.org)](https://developer.mozilla.org/zh-CN/docs/Web/CSS/Specificity)\n3. [CSS 样式优先级 | 菜鸟教程 (runoob.com)](https://www.runoob.com/w3cnote/css-style-priority.html)\n","slug":"talk-about-the-calculation-rules-of-the-priority-of-css-selector-priority-z2qeyfl","published":1,"__permalink":"/post/talk-about-the-calculation-rules-of-the-priority-of-css-selector-priority-z2qeyfl.html","layout":"post","photos":[],"_id":"cm5m2db0q0004tsnv08i9gms5","content":"<p><img src=\"https://raw.githubusercontent.com/eeymoo/Eeymoo.github.io/main/images/unsplash-G6VCCOdOCzY-20250107101324-1fqosg5.jpg\" alt=\"image\"></p>\n<h1 id=\"CSS选择器优先级计算规则及其最佳实践\"><a href=\"#CSS选择器优先级计算规则及其最佳实践\" class=\"headerlink\" title=\"CSS选择器优先级计算规则及其最佳实践\"></a>CSS选择器优先级计算规则及其最佳实践</h1><p>CSS优先级是一个值得思考的问题，再次之前我对CSS优先级的理解是:</p>\n<blockquote>\n<p>!important&gt;内联样式&gt;ID选择器&gt;类选择器&gt;类型选择器</p>\n</blockquote>\n<p>相信很多人对CSS优先级的理解也是这样的，但是一篇文章(<a href=\"http://c.biancheng.net/view/7216.html\">CSS选择器的优先级（精讲版） (biancheng.net)</a>)上面书写了关于<strong>CSS 选择器优先级的计算规则</strong>的内容，使我开始对CSS优先级进行重新研究。</p>\n<p>根据W3C给出关于选择器特异性(specificity，国内一般称优先级)的解释，选择器分为ABC三个等级，其中A为ID选择器，B包括类选择器、属性选择器和伪类，C包括类型选择器和伪元素，当然还存在一个通用选择器，但是通用选择器一般忽略。</p>\n<table>\n<thead>\n<tr>\n<th>等级</th>\n<th>包含选择器</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>A</td>\n<td>计算选择器中 ID 选择器的数量</td>\n</tr>\n<tr>\n<td>B</td>\n<td>计算选择器中类选择器、属性选择器和伪类的数量</td>\n</tr>\n<tr>\n<td>C</td>\n<td>计算选择器中类型选择器和伪元素的数量</td>\n</tr>\n</tbody></table>\n<p>优先级的计算，从A级开始到C级结束，如果到C级是两个选择器的优先级还是相等的那么有限选择靠后的选择器。</p>\n<h3 id=\"重复简单选择器\"><a href=\"#重复简单选择器\" class=\"headerlink\" title=\"重复简单选择器\"></a>重复简单选择器</h3><p>CSS选择器允许重复出现简单选择器，并且简单选择器的重复出现会增加优先级。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.class</span><span class=\"selector-class\">.class</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: red;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.class</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: green;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>也就是说如上代码中第一个选择器重复出现了<code>.class</code>选择器，第二个选择器只出现了一个<code>.class</code>选择器，这两种写法都是正确的，并且第一个选择器<code>.class.class</code>的优先级大于第二个选择器<code>.class</code>，所以结果是背景颜色将呈现红色。</p>\n<table>\n<thead>\n<tr>\n<th>选择器</th>\n<th>优先级 (A, B, C)</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>.class.class</td>\n<td>(0, 2, 0)</td>\n</tr>\n<tr>\n<td>.class</td>\n<td>(0, 1, 0)</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>在低版本CSS中可能简单重复选择器会被忽略，如在ie8中重复id或被忽略，在ie5中重复的class或被忽略。</p>\n<p>拒绝IE，从我做起！</p>\n</blockquote>\n<h3 id=\"特殊选择器\"><a href=\"#特殊选择器\" class=\"headerlink\" title=\"特殊选择器\"></a>特殊选择器</h3><p>一些伪类和其他选择器中存在一些特殊的选择器，因此单独定义了这些特殊选择器的特异性。</p>\n<ol>\n<li>选择器<code>:is()</code>、<code>:not()</code>、<code>:has()</code>的优先级是选择器列表中最具有复杂性的选择器的优先级取代。</li>\n<li>选择器<code>:nth-child()</code>、<code>:nth-last-child()</code>的优先级是伪类本身的优先级（计为一个伪类选择器，也就是计为B），再加上选择器列表中最具复杂性的选择器的优先级。</li>\n<li>选择器<code>:where()</code>伪类的优先级被零代替，也就是没有优先级，再优先级计算中不做数。</li>\n<li>通用选择符以及其他选择符在优先级中不计数。</li>\n</ol>\n<h3 id=\"优先级计算\"><a href=\"#优先级计算\" class=\"headerlink\" title=\"优先级计算\"></a>优先级计算</h3><table>\n<thead>\n<tr>\n<th>选择器</th>\n<th>优先级 (A, B, C)</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>.class</td>\n<td>(0, 1, 0)</td>\n</tr>\n<tr>\n<td>​#Red#​</td>\n<td>(1, 0, 0)</td>\n</tr>\n<tr>\n<td>.container :is(.container&gt;#Red, .container&gt;.class)</td>\n<td>(1, 2, 0)</td>\n</tr>\n<tr>\n<td>.container #Red.class:nth-child(1)#​</td>\n<td>(1, 3, 0)</td>\n</tr>\n<tr>\n<td>:is(.container&gt;.class.class)</td>\n<td>(0, 3, 0)</td>\n</tr>\n<tr>\n<td>​#Red:is(.container&gt;.class)#​</td>\n<td>(1, 2, 0)</td>\n</tr>\n<tr>\n<td>.container div:nth-child(1)</td>\n<td>(0, 2, 1)</td>\n</tr>\n<tr>\n<td>:is(#Red.class)</td>\n<td>(1, 1, 0)</td>\n</tr>\n<tr>\n<td>​#Red.class#​</td>\n<td>(1, 1, 0)</td>\n</tr>\n<tr>\n<td>​#Red.class:nth-child(1)#​</td>\n<td>(1, 2, 0)</td>\n</tr>\n<tr>\n<td>​#Red#​Red</td>\n<td>(2, 0, 0)</td>\n</tr>\n</tbody></table>\n<p><a href=\"https://code.juejin.cn/pen/7103862825264611359\">代码片段</a></p>\n<p><a href=\"https://codepen.io/onemue/pen/RwQMBmd\">codepen</a></p>\n<h3 id=\"specificity求和\"><a href=\"#specificity求和\" class=\"headerlink\" title=\"specificity求和\"></a>specificity求和</h3><p>在一些其他文档中将讲A、B、C分别比作100,10,1 进行求和，是不准确的，如果按照这样做那么10个class是不是相当于一个id，显然不是。</p>\n<p>在<a href=\"https://www.w3.org/TR/CSS1/#cascading-order\">CSS Level 1</a>、<a href=\"https://drafts.csswg.org/selectors-3/#specificity\">Selectors Level 3</a>中也有这样的描述。</p>\n<p>在主流浏览器中高等级高于低等级是即使ABC求和相同也不会优先使用后声明的CSS。</p>\n<p>造成这样的原因是<strong>权重的进制是并不是十进制，CSS 权重进制在 IE6 为 256，后来扩大到了 65536，现代浏览器则采用更大的数量</strong>。也可以理解<strong>选择器的权值不能进位</strong>，或者理解为选择器权值ABC单独计算比较。</p>\n<h3 id=\"关于-important\"><a href=\"#关于-important\" class=\"headerlink\" title=\"关于!important \"></a>关于<code>!important </code></h3><p>MDN指出“使用 <code>!important</code> 是一个<strong>坏习惯</strong>，应该尽量避免”，并给出了使用<code>!important</code> 的情况：</p>\n<ul>\n<li><strong>一定</strong>要优先考虑使用样式规则的优先级来解决问题而不是 <code>!important</code></li>\n<li><strong>只有</strong>在需要覆盖全站或外部 CSS 的特定页面中使用 <code>!important</code></li>\n<li><strong>永远不要</strong>在你的插件中使用 <code>!important</code></li>\n<li><strong>永远不要</strong>在全站范围的 CSS 代码中使用 <code>!important</code></li>\n</ul>\n<p>以及替代 <code>!important</code>的方法:</p>\n<ol>\n<li>更好地利用 CSS 级联属性</li>\n<li>使用更具体的规则。在您选择的元素之前，增加一个或多个其他元素，使选择器变得更加具体，并获得更高的优先级。</li>\n<li>对于（2）的一种特殊情况，当您无其他要指定的内容时，请复制简单的选择器以增加特异性。</li>\n</ol>\n<p>推荐阅读<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/Specificity#!important_%E4%BE%8B%E5%A4%96%E8%A7%84%E5%88%99\">优先级 - CSS（层叠样式表） | MDN (mozilla.org)</a>，了解更多<code>!important</code>的使用意见。</p>\n<h3 id=\"其他-CSS-优先规则\"><a href=\"#其他-CSS-优先规则\" class=\"headerlink\" title=\"其他 CSS 优先规则\"></a>其他 CSS 优先规则</h3><p><strong>CSS 优先规则1：</strong>  最近的祖先样式比其他祖先样式优先级高。</p>\n<p><strong>CSS 优先规则2：</strong>  “直接样式”比”祖先样式”优先级高。</p>\n<p><strong>CSS 优先规则3：</strong>  优先级关系：内联样式 &gt; ID 选择器 &gt; 类选择器 &#x3D; 属性选择器 &#x3D; 伪类选择器 &gt; 标签选择器 &#x3D; 伪元素选择器。</p>\n<p><strong>CSS 优先规则4：</strong>  计算选择符中 ID 选择器的个数（a），计算选择符中类选择器、属性选择器以及伪类选择器的个数之和（b），计算选择符中标签选择器和伪元素选择器的个数之和（c）。按 a、b、c 的顺序依次比较大小，大的则优先级高，相等则比较下一个。若最后两个的选择符中 a、b、c 都相等，则按照”就近原则”来判断。</p>\n<p><strong>CSS 优先规则5：</strong>  属性后插有  <strong>!important</strong> 的属性拥有最高优先级。若同时插有  <strong>!important</strong>，则再利用规则 3、4 判断优先级。</p>\n<blockquote>\n<p>注意: 文档树中元素的接近度（<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/Specificity#%E6%97%A0%E8%A7%86DOM%E6%A0%91%E4%B8%AD%E7%9A%84%E8%B7%9D%E7%A6%BB\">Proximity of elements</a>）对优先级没有影响。</p>\n</blockquote>\n<h3 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h3><ol>\n<li><a href=\"http://www.w3.org/TR/selectors/#specificity\">Selectors Level 4</a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/Specificity\">优先级 - CSS（层叠样式表） | MDN (mozilla.org)</a></li>\n<li><a href=\"https://www.runoob.com/w3cnote/css-style-priority.html\">CSS 样式优先级 | 菜鸟教程 (runoob.com)</a></li>\n</ol>\n","more":"<p><img src=\"https://raw.githubusercontent.com/eeymoo/Eeymoo.github.io/main/images/unsplash-G6VCCOdOCzY-20250107101324-1fqosg5.jpg\" alt=\"image\"></p>\n<h1 id=\"CSS选择器优先级计算规则及其最佳实践\"><a href=\"#CSS选择器优先级计算规则及其最佳实践\" class=\"headerlink\" title=\"CSS选择器优先级计算规则及其最佳实践\"></a>CSS选择器优先级计算规则及其最佳实践</h1><p>CSS优先级是一个值得思考的问题，再次之前我对CSS优先级的理解是:</p>\n<blockquote>\n<p>!important&gt;内联样式&gt;ID选择器&gt;类选择器&gt;类型选择器</p>\n</blockquote>\n<p>相信很多人对CSS优先级的理解也是这样的，但是一篇文章(<a href=\"http://c.biancheng.net/view/7216.html\">CSS选择器的优先级（精讲版） (biancheng.net)</a>)上面书写了关于<strong>CSS 选择器优先级的计算规则</strong>的内容，使我开始对CSS优先级进行重新研究。</p>\n<p>根据W3C给出关于选择器特异性(specificity，国内一般称优先级)的解释，选择器分为ABC三个等级，其中A为ID选择器，B包括类选择器、属性选择器和伪类，C包括类型选择器和伪元素，当然还存在一个通用选择器，但是通用选择器一般忽略。</p>\n<table>\n<thead>\n<tr>\n<th>等级</th>\n<th>包含选择器</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>A</td>\n<td>计算选择器中 ID 选择器的数量</td>\n</tr>\n<tr>\n<td>B</td>\n<td>计算选择器中类选择器、属性选择器和伪类的数量</td>\n</tr>\n<tr>\n<td>C</td>\n<td>计算选择器中类型选择器和伪元素的数量</td>\n</tr>\n</tbody></table>\n<p>优先级的计算，从A级开始到C级结束，如果到C级是两个选择器的优先级还是相等的那么有限选择靠后的选择器。</p>\n<h3 id=\"重复简单选择器\"><a href=\"#重复简单选择器\" class=\"headerlink\" title=\"重复简单选择器\"></a>重复简单选择器</h3><p>CSS选择器允许重复出现简单选择器，并且简单选择器的重复出现会增加优先级。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.class</span><span class=\"selector-class\">.class</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: red;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.class</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: green;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>也就是说如上代码中第一个选择器重复出现了<code>.class</code>选择器，第二个选择器只出现了一个<code>.class</code>选择器，这两种写法都是正确的，并且第一个选择器<code>.class.class</code>的优先级大于第二个选择器<code>.class</code>，所以结果是背景颜色将呈现红色。</p>\n<table>\n<thead>\n<tr>\n<th>选择器</th>\n<th>优先级 (A, B, C)</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>.class.class</td>\n<td>(0, 2, 0)</td>\n</tr>\n<tr>\n<td>.class</td>\n<td>(0, 1, 0)</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>在低版本CSS中可能简单重复选择器会被忽略，如在ie8中重复id或被忽略，在ie5中重复的class或被忽略。</p>\n<p>拒绝IE，从我做起！</p>\n</blockquote>\n<h3 id=\"特殊选择器\"><a href=\"#特殊选择器\" class=\"headerlink\" title=\"特殊选择器\"></a>特殊选择器</h3><p>一些伪类和其他选择器中存在一些特殊的选择器，因此单独定义了这些特殊选择器的特异性。</p>\n<ol>\n<li>选择器<code>:is()</code>、<code>:not()</code>、<code>:has()</code>的优先级是选择器列表中最具有复杂性的选择器的优先级取代。</li>\n<li>选择器<code>:nth-child()</code>、<code>:nth-last-child()</code>的优先级是伪类本身的优先级（计为一个伪类选择器，也就是计为B），再加上选择器列表中最具复杂性的选择器的优先级。</li>\n<li>选择器<code>:where()</code>伪类的优先级被零代替，也就是没有优先级，再优先级计算中不做数。</li>\n<li>通用选择符以及其他选择符在优先级中不计数。</li>\n</ol>\n<h3 id=\"优先级计算\"><a href=\"#优先级计算\" class=\"headerlink\" title=\"优先级计算\"></a>优先级计算</h3><table>\n<thead>\n<tr>\n<th>选择器</th>\n<th>优先级 (A, B, C)</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>.class</td>\n<td>(0, 1, 0)</td>\n</tr>\n<tr>\n<td>​#Red#​</td>\n<td>(1, 0, 0)</td>\n</tr>\n<tr>\n<td>.container :is(.container&gt;#Red, .container&gt;.class)</td>\n<td>(1, 2, 0)</td>\n</tr>\n<tr>\n<td>.container #Red.class:nth-child(1)#​</td>\n<td>(1, 3, 0)</td>\n</tr>\n<tr>\n<td>:is(.container&gt;.class.class)</td>\n<td>(0, 3, 0)</td>\n</tr>\n<tr>\n<td>​#Red:is(.container&gt;.class)#​</td>\n<td>(1, 2, 0)</td>\n</tr>\n<tr>\n<td>.container div:nth-child(1)</td>\n<td>(0, 2, 1)</td>\n</tr>\n<tr>\n<td>:is(#Red.class)</td>\n<td>(1, 1, 0)</td>\n</tr>\n<tr>\n<td>​#Red.class#​</td>\n<td>(1, 1, 0)</td>\n</tr>\n<tr>\n<td>​#Red.class:nth-child(1)#​</td>\n<td>(1, 2, 0)</td>\n</tr>\n<tr>\n<td>​#Red#​Red</td>\n<td>(2, 0, 0)</td>\n</tr>\n</tbody></table>\n<p><a href=\"https://code.juejin.cn/pen/7103862825264611359\">代码片段</a></p>\n<p><a href=\"https://codepen.io/onemue/pen/RwQMBmd\">codepen</a></p>\n<h3 id=\"specificity求和\"><a href=\"#specificity求和\" class=\"headerlink\" title=\"specificity求和\"></a>specificity求和</h3><p>在一些其他文档中将讲A、B、C分别比作100,10,1 进行求和，是不准确的，如果按照这样做那么10个class是不是相当于一个id，显然不是。</p>\n<p>在<a href=\"https://www.w3.org/TR/CSS1/#cascading-order\">CSS Level 1</a>、<a href=\"https://drafts.csswg.org/selectors-3/#specificity\">Selectors Level 3</a>中也有这样的描述。</p>\n<p>在主流浏览器中高等级高于低等级是即使ABC求和相同也不会优先使用后声明的CSS。</p>\n<p>造成这样的原因是<strong>权重的进制是并不是十进制，CSS 权重进制在 IE6 为 256，后来扩大到了 65536，现代浏览器则采用更大的数量</strong>。也可以理解<strong>选择器的权值不能进位</strong>，或者理解为选择器权值ABC单独计算比较。</p>\n<h3 id=\"关于-important\"><a href=\"#关于-important\" class=\"headerlink\" title=\"关于!important \"></a>关于<code>!important </code></h3><p>MDN指出“使用 <code>!important</code> 是一个<strong>坏习惯</strong>，应该尽量避免”，并给出了使用<code>!important</code> 的情况：</p>\n<ul>\n<li><strong>一定</strong>要优先考虑使用样式规则的优先级来解决问题而不是 <code>!important</code></li>\n<li><strong>只有</strong>在需要覆盖全站或外部 CSS 的特定页面中使用 <code>!important</code></li>\n<li><strong>永远不要</strong>在你的插件中使用 <code>!important</code></li>\n<li><strong>永远不要</strong>在全站范围的 CSS 代码中使用 <code>!important</code></li>\n</ul>\n<p>以及替代 <code>!important</code>的方法:</p>\n<ol>\n<li>更好地利用 CSS 级联属性</li>\n<li>使用更具体的规则。在您选择的元素之前，增加一个或多个其他元素，使选择器变得更加具体，并获得更高的优先级。</li>\n<li>对于（2）的一种特殊情况，当您无其他要指定的内容时，请复制简单的选择器以增加特异性。</li>\n</ol>\n<p>推荐阅读<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/Specificity#!important_%E4%BE%8B%E5%A4%96%E8%A7%84%E5%88%99\">优先级 - CSS（层叠样式表） | MDN (mozilla.org)</a>，了解更多<code>!important</code>的使用意见。</p>\n<h3 id=\"其他-CSS-优先规则\"><a href=\"#其他-CSS-优先规则\" class=\"headerlink\" title=\"其他 CSS 优先规则\"></a>其他 CSS 优先规则</h3><p><strong>CSS 优先规则1：</strong>  最近的祖先样式比其他祖先样式优先级高。</p>\n<p><strong>CSS 优先规则2：</strong>  “直接样式”比”祖先样式”优先级高。</p>\n<p><strong>CSS 优先规则3：</strong>  优先级关系：内联样式 &gt; ID 选择器 &gt; 类选择器 &#x3D; 属性选择器 &#x3D; 伪类选择器 &gt; 标签选择器 &#x3D; 伪元素选择器。</p>\n<p><strong>CSS 优先规则4：</strong>  计算选择符中 ID 选择器的个数（a），计算选择符中类选择器、属性选择器以及伪类选择器的个数之和（b），计算选择符中标签选择器和伪元素选择器的个数之和（c）。按 a、b、c 的顺序依次比较大小，大的则优先级高，相等则比较下一个。若最后两个的选择符中 a、b、c 都相等，则按照”就近原则”来判断。</p>\n<p><strong>CSS 优先规则5：</strong>  属性后插有  <strong>!important</strong> 的属性拥有最高优先级。若同时插有  <strong>!important</strong>，则再利用规则 3、4 判断优先级。</p>\n<blockquote>\n<p>注意: 文档树中元素的接近度（<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/Specificity#%E6%97%A0%E8%A7%86DOM%E6%A0%91%E4%B8%AD%E7%9A%84%E8%B7%9D%E7%A6%BB\">Proximity of elements</a>）对优先级没有影响。</p>\n</blockquote>\n<h3 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h3><ol>\n<li><a href=\"http://www.w3.org/TR/selectors/#specificity\">Selectors Level 4</a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/Specificity\">优先级 - CSS（层叠样式表） | MDN (mozilla.org)</a></li>\n<li><a href=\"https://www.runoob.com/w3cnote/css-style-priority.html\">CSS 样式优先级 | 菜鸟教程 (runoob.com)</a></li>\n</ol>\n"},{"title":"JavaScript 对象属性顺序的探索与处理方法","date":"2023-08-18T09:47:53.000Z","updated":"2025-01-07T02:52:23.000Z","excerpt":"本文探讨了 JavaScript 中对象（Object）的顺序问题。虽然 ES3 标准强调对象是无序的，但自 ES6 以来，逐渐引入了属性顺序的概念。在不同浏览器中，对于 `for...in` 的处理和属性顺序的解析存在差异。一些浏览器遵循 ECMAScript 第五版规范，而另一些则遵循第三版规范，因此对于对象的排序并不统一。为了避免因不同浏览器导致的排序不一致，建议将对象转换为数组形式（如 `[{ key, value }]`）进行处理，尽管在某些情况下，对象的键值可能会按照特定规则排列。文章最后提供了一些参考文献，以便进一步了解 JavaScript 对象属性的顺序行为。","comments":1,"toc":true,"_content":"\n![image](https://raw.githubusercontent.com/eeymoo/Eeymoo.github.io/main/images/unsplash-67wjyl7KzRM-20241231145826-n02gwny.jpg)\n\n# 关于 JavaScript 中 Object 顺序的一些探索\n\n面试中出现了一个题目：\n\n> 将 对象 `{6: 46, 8: 23, 14: 5, 10: 3}` 按照值的顺序排列。\n\n由于做开始他说的一个数组，说这个题的时候我以为是类数组对象，结果是是如上的对象，排序嘛，（不考虑时间复杂度和空间复杂度的话）基本上没什么难度， 但是一直有一个疑惑在脑中，Object 不是无序的吗？\n\n> 本文主要探讨不同的 *Object* 定义方式（或者说声明方式）是否影响”*Object* 顺序“，”*Object* 顺序“是什么样的，以及常见处理”Object顺序“的方式。\n\n首先再次之前我的认为是”对象是无序的，数组是有序的，如果处理对象的顺序的话，还是使用数组对象`[{key, value}]`的方式“ 。\n\n在 [ECMA-262_3rd_edition_december_1999](https://www.ecma-international.org/wp-content/uploads/ECMA-262_3rd_edition_december_1999.pdf) 中有提到：\n\n> 4.3.3 Object\n> An **object** is a member of the type **Object**. It is an unordered collection of properties each of which contains a primitive value, object, or function. A function stored in a property of an object is called a method.\n\n也就是在 ES3 中是 Objiect 是乱序的，但是在 ES6 中逐渐开始在 Object 的中开始添加 Object 部分放的顺序之说。\n\n不同浏览器在处理 `for...in` 时的解析顺序时不同的，在 Chrome 和 Opera 中遵循的是 **ECMA-262** 第五版本规范，而在 Firefox 和 Safari遵循的是 **ECMA-262**  第三版本规范。\n\n在通常情况下，如果要处理对象的排序，我建议使用数组处理，也就是将对象处理为 `[{ key, value }]` 这样的的数组形式，按照数组排序，因为我还是觉得对象是无序的，尽管他是按照一定的顺序排序的，但为了避免在不同的浏览器中的排序不同还是将他作为数组处理比较好。\n\n### 参考文献\n\n1. [js能够保证object属性的输出顺序吗？ - Jartto's blog](http://jartto.wang/2016/10/25/does-js-guarantee-object-property-order/)\n2. [Does JavaScript guarantee object property order? - Stack Overflow](https://stackoverflow.com/questions/5525795/does-javascript-guarantee-object-property-order)\n3. [ECMA-262_3rd_edition_december_1999](https://www.ecma-international.org/wp-content/uploads/ECMA-262_3rd_edition_december_1999.pdf)\n","source":"_posts/some-explorations-about-the-order-of-object-in-javascript-z1s1tng.md","raw":"---\ntitle: JavaScript 对象属性顺序的探索与处理方法\ndate: '2023-08-18 17:47:53'\nupdated: '2025-01-07 10:52:23'\nexcerpt: >-\n  本文探讨了 JavaScript 中对象（Object）的顺序问题。虽然 ES3 标准强调对象是无序的，但自 ES6\n  以来，逐渐引入了属性顺序的概念。在不同浏览器中，对于 `for...in` 的处理和属性顺序的解析存在差异。一些浏览器遵循 ECMAScript\n  第五版规范，而另一些则遵循第三版规范，因此对于对象的排序并不统一。为了避免因不同浏览器导致的排序不一致，建议将对象转换为数组形式（如 `[{ key,\n  value }]`）进行处理，尽管在某些情况下，对象的键值可能会按照特定规则排列。文章最后提供了一些参考文献，以便进一步了解 JavaScript\n  对象属性的顺序行为。\ntags:\n  - JavaScript\n  - 对象排序\n  - 无序性\n  - ES6\n  - 前端开发\npermalink: /post/some-explorations-about-the-order-of-object-in-javascript-z1s1tng.html\ncomments: true\ntoc: true\n---\n\n![image](https://raw.githubusercontent.com/eeymoo/Eeymoo.github.io/main/images/unsplash-67wjyl7KzRM-20241231145826-n02gwny.jpg)\n\n# 关于 JavaScript 中 Object 顺序的一些探索\n\n面试中出现了一个题目：\n\n> 将 对象 `{6: 46, 8: 23, 14: 5, 10: 3}` 按照值的顺序排列。\n\n由于做开始他说的一个数组，说这个题的时候我以为是类数组对象，结果是是如上的对象，排序嘛，（不考虑时间复杂度和空间复杂度的话）基本上没什么难度， 但是一直有一个疑惑在脑中，Object 不是无序的吗？\n\n> 本文主要探讨不同的 *Object* 定义方式（或者说声明方式）是否影响”*Object* 顺序“，”*Object* 顺序“是什么样的，以及常见处理”Object顺序“的方式。\n\n首先再次之前我的认为是”对象是无序的，数组是有序的，如果处理对象的顺序的话，还是使用数组对象`[{key, value}]`的方式“ 。\n\n在 [ECMA-262_3rd_edition_december_1999](https://www.ecma-international.org/wp-content/uploads/ECMA-262_3rd_edition_december_1999.pdf) 中有提到：\n\n> 4.3.3 Object\n> An **object** is a member of the type **Object**. It is an unordered collection of properties each of which contains a primitive value, object, or function. A function stored in a property of an object is called a method.\n\n也就是在 ES3 中是 Objiect 是乱序的，但是在 ES6 中逐渐开始在 Object 的中开始添加 Object 部分放的顺序之说。\n\n不同浏览器在处理 `for...in` 时的解析顺序时不同的，在 Chrome 和 Opera 中遵循的是 **ECMA-262** 第五版本规范，而在 Firefox 和 Safari遵循的是 **ECMA-262**  第三版本规范。\n\n在通常情况下，如果要处理对象的排序，我建议使用数组处理，也就是将对象处理为 `[{ key, value }]` 这样的的数组形式，按照数组排序，因为我还是觉得对象是无序的，尽管他是按照一定的顺序排序的，但为了避免在不同的浏览器中的排序不同还是将他作为数组处理比较好。\n\n### 参考文献\n\n1. [js能够保证object属性的输出顺序吗？ - Jartto's blog](http://jartto.wang/2016/10/25/does-js-guarantee-object-property-order/)\n2. [Does JavaScript guarantee object property order? - Stack Overflow](https://stackoverflow.com/questions/5525795/does-javascript-guarantee-object-property-order)\n3. [ECMA-262_3rd_edition_december_1999](https://www.ecma-international.org/wp-content/uploads/ECMA-262_3rd_edition_december_1999.pdf)\n","slug":"some-explorations-about-the-order-of-object-in-javascript-z1s1tng","published":1,"__permalink":"/post/some-explorations-about-the-order-of-object-in-javascript-z1s1tng.html","layout":"post","photos":[],"_id":"cm5m2db0r0005tsnved9hglvk","content":"<p><img src=\"https://raw.githubusercontent.com/eeymoo/Eeymoo.github.io/main/images/unsplash-67wjyl7KzRM-20241231145826-n02gwny.jpg\" alt=\"image\"></p>\n<h1 id=\"关于-JavaScript-中-Object-顺序的一些探索\"><a href=\"#关于-JavaScript-中-Object-顺序的一些探索\" class=\"headerlink\" title=\"关于 JavaScript 中 Object 顺序的一些探索\"></a>关于 JavaScript 中 Object 顺序的一些探索</h1><p>面试中出现了一个题目：</p>\n<blockquote>\n<p>将 对象 <code>&#123;6: 46, 8: 23, 14: 5, 10: 3&#125;</code> 按照值的顺序排列。</p>\n</blockquote>\n<p>由于做开始他说的一个数组，说这个题的时候我以为是类数组对象，结果是是如上的对象，排序嘛，（不考虑时间复杂度和空间复杂度的话）基本上没什么难度， 但是一直有一个疑惑在脑中，Object 不是无序的吗？</p>\n<blockquote>\n<p>本文主要探讨不同的 <em>Object</em> 定义方式（或者说声明方式）是否影响”<em>Object</em> 顺序“，”<em>Object</em> 顺序“是什么样的，以及常见处理”Object顺序“的方式。</p>\n</blockquote>\n<p>首先再次之前我的认为是”对象是无序的，数组是有序的，如果处理对象的顺序的话，还是使用数组对象<code>[&#123;key, value&#125;]</code>的方式“ 。</p>\n<p>在 <a href=\"https://www.ecma-international.org/wp-content/uploads/ECMA-262_3rd_edition_december_1999.pdf\">ECMA-262_3rd_edition_december_1999</a> 中有提到：</p>\n<blockquote>\n<p>4.3.3 Object<br>An <strong>object</strong> is a member of the type <strong>Object</strong>. It is an unordered collection of properties each of which contains a primitive value, object, or function. A function stored in a property of an object is called a method.</p>\n</blockquote>\n<p>也就是在 ES3 中是 Objiect 是乱序的，但是在 ES6 中逐渐开始在 Object 的中开始添加 Object 部分放的顺序之说。</p>\n<p>不同浏览器在处理 <code>for...in</code> 时的解析顺序时不同的，在 Chrome 和 Opera 中遵循的是 <strong>ECMA-262</strong> 第五版本规范，而在 Firefox 和 Safari遵循的是 <strong>ECMA-262</strong>  第三版本规范。</p>\n<p>在通常情况下，如果要处理对象的排序，我建议使用数组处理，也就是将对象处理为 <code>[&#123; key, value &#125;]</code> 这样的的数组形式，按照数组排序，因为我还是觉得对象是无序的，尽管他是按照一定的顺序排序的，但为了避免在不同的浏览器中的排序不同还是将他作为数组处理比较好。</p>\n<h3 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h3><ol>\n<li><a href=\"http://jartto.wang/2016/10/25/does-js-guarantee-object-property-order/\">js能够保证object属性的输出顺序吗？ - Jartto’s blog</a></li>\n<li><a href=\"https://stackoverflow.com/questions/5525795/does-javascript-guarantee-object-property-order\">Does JavaScript guarantee object property order? - Stack Overflow</a></li>\n<li><a href=\"https://www.ecma-international.org/wp-content/uploads/ECMA-262_3rd_edition_december_1999.pdf\">ECMA-262_3rd_edition_december_1999</a></li>\n</ol>\n","more":"<p><img src=\"https://raw.githubusercontent.com/eeymoo/Eeymoo.github.io/main/images/unsplash-67wjyl7KzRM-20241231145826-n02gwny.jpg\" alt=\"image\"></p>\n<h1 id=\"关于-JavaScript-中-Object-顺序的一些探索\"><a href=\"#关于-JavaScript-中-Object-顺序的一些探索\" class=\"headerlink\" title=\"关于 JavaScript 中 Object 顺序的一些探索\"></a>关于 JavaScript 中 Object 顺序的一些探索</h1><p>面试中出现了一个题目：</p>\n<blockquote>\n<p>将 对象 <code>&#123;6: 46, 8: 23, 14: 5, 10: 3&#125;</code> 按照值的顺序排列。</p>\n</blockquote>\n<p>由于做开始他说的一个数组，说这个题的时候我以为是类数组对象，结果是是如上的对象，排序嘛，（不考虑时间复杂度和空间复杂度的话）基本上没什么难度， 但是一直有一个疑惑在脑中，Object 不是无序的吗？</p>\n<blockquote>\n<p>本文主要探讨不同的 <em>Object</em> 定义方式（或者说声明方式）是否影响”<em>Object</em> 顺序“，”<em>Object</em> 顺序“是什么样的，以及常见处理”Object顺序“的方式。</p>\n</blockquote>\n<p>首先再次之前我的认为是”对象是无序的，数组是有序的，如果处理对象的顺序的话，还是使用数组对象<code>[&#123;key, value&#125;]</code>的方式“ 。</p>\n<p>在 <a href=\"https://www.ecma-international.org/wp-content/uploads/ECMA-262_3rd_edition_december_1999.pdf\">ECMA-262_3rd_edition_december_1999</a> 中有提到：</p>\n<blockquote>\n<p>4.3.3 Object<br>An <strong>object</strong> is a member of the type <strong>Object</strong>. It is an unordered collection of properties each of which contains a primitive value, object, or function. A function stored in a property of an object is called a method.</p>\n</blockquote>\n<p>也就是在 ES3 中是 Objiect 是乱序的，但是在 ES6 中逐渐开始在 Object 的中开始添加 Object 部分放的顺序之说。</p>\n<p>不同浏览器在处理 <code>for...in</code> 时的解析顺序时不同的，在 Chrome 和 Opera 中遵循的是 <strong>ECMA-262</strong> 第五版本规范，而在 Firefox 和 Safari遵循的是 <strong>ECMA-262</strong>  第三版本规范。</p>\n<p>在通常情况下，如果要处理对象的排序，我建议使用数组处理，也就是将对象处理为 <code>[&#123; key, value &#125;]</code> 这样的的数组形式，按照数组排序，因为我还是觉得对象是无序的，尽管他是按照一定的顺序排序的，但为了避免在不同的浏览器中的排序不同还是将他作为数组处理比较好。</p>\n<h3 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h3><ol>\n<li><a href=\"http://jartto.wang/2016/10/25/does-js-guarantee-object-property-order/\">js能够保证object属性的输出顺序吗？ - Jartto’s blog</a></li>\n<li><a href=\"https://stackoverflow.com/questions/5525795/does-javascript-guarantee-object-property-order\">Does JavaScript guarantee object property order? - Stack Overflow</a></li>\n<li><a href=\"https://www.ecma-international.org/wp-content/uploads/ECMA-262_3rd_edition_december_1999.pdf\">ECMA-262_3rd_edition_december_1999</a></li>\n</ol>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cm5m2db0h0000tsnvf4q2f8rs","category_id":"cm5m2db0n0002tsnvdqtlbkjm","_id":"cm5m2db0u0008tsnv3hi9bmrh"},{"post_id":"cm5m2db0l0001tsnv07pn3szc","category_id":"cm5m2db0n0002tsnvdqtlbkjm","_id":"cm5m2db0u000atsnv5lezb85v"}],"PostTag":[{"post_id":"cm5m2db0h0000tsnvf4q2f8rs","tag_id":"cm5m2db0o0003tsnv19b3f9us","_id":"cm5m2db0w000etsnv9cgk1e8d"},{"post_id":"cm5m2db0h0000tsnvf4q2f8rs","tag_id":"cm5m2db0s0007tsnvd3r4h6t6","_id":"cm5m2db0w000ftsnvdg7y9g9a"},{"post_id":"cm5m2db0h0000tsnvf4q2f8rs","tag_id":"cm5m2db0u0009tsnvdlp94toa","_id":"cm5m2db0w000htsnvfrqacmmf"},{"post_id":"cm5m2db0h0000tsnvf4q2f8rs","tag_id":"cm5m2db0v000btsnva7sib0mg","_id":"cm5m2db0w000itsnv2mozgjqz"},{"post_id":"cm5m2db0h0000tsnvf4q2f8rs","tag_id":"cm5m2db0v000ctsnv1dc4d06l","_id":"cm5m2db0w000ktsnvbauv6gme"},{"post_id":"cm5m2db0l0001tsnv07pn3szc","tag_id":"cm5m2db0v000dtsnvefx1cziz","_id":"cm5m2db0w000ltsnv3tcmfryq"},{"post_id":"cm5m2db0l0001tsnv07pn3szc","tag_id":"cm5m2db0w000gtsnv6bdqh2aa","_id":"cm5m2db0x000ntsnvdn1dhj1m"},{"post_id":"cm5m2db0q0004tsnv08i9gms5","tag_id":"cm5m2db0w000jtsnv2i0rfnwl","_id":"cm5m2db0y000qtsnvcl008stb"},{"post_id":"cm5m2db0q0004tsnv08i9gms5","tag_id":"cm5m2db0x000mtsnvc8ug7ioy","_id":"cm5m2db0y000rtsnv34v60gmx"},{"post_id":"cm5m2db0q0004tsnv08i9gms5","tag_id":"cm5m2db0x000otsnv6pbpecya","_id":"cm5m2db0y000ttsnv8b0ud659"},{"post_id":"cm5m2db0r0005tsnved9hglvk","tag_id":"cm5m2db0x000ptsnvd4034kwa","_id":"cm5m2db0z000xtsnv9ttdh59u"},{"post_id":"cm5m2db0r0005tsnved9hglvk","tag_id":"cm5m2db0y000stsnvhtsv9npi","_id":"cm5m2db0z000ytsnv16g4blhh"},{"post_id":"cm5m2db0r0005tsnved9hglvk","tag_id":"cm5m2db0y000utsnva7ux3ysx","_id":"cm5m2db0z000ztsnvezgl4gai"},{"post_id":"cm5m2db0r0005tsnved9hglvk","tag_id":"cm5m2db0y000vtsnv4uq2h54m","_id":"cm5m2db0z0010tsnvbwfo2wg2"},{"post_id":"cm5m2db0r0005tsnved9hglvk","tag_id":"cm5m2db0y000wtsnvedry03am","_id":"cm5m2db0z0011tsnvgtbcat07"}],"Tag":[{"name":"数组","_id":"cm5m2db0o0003tsnv19b3f9us"},{"name":"迭代","_id":"cm5m2db0s0007tsnvd3r4h6t6"},{"name":"稀疏","_id":"cm5m2db0u0009tsnvdlp94toa"},{"name":"方法","_id":"cm5m2db0v000btsnva7sib0mg"},{"name":"异常处理","_id":"cm5m2db0v000ctsnv1dc4d06l"},{"name":"性能优化","_id":"cm5m2db0v000dtsnvefx1cziz"},{"name":"开发技巧","_id":"cm5m2db0w000gtsnv6bdqh2aa"},{"name":"CSS","_id":"cm5m2db0w000jtsnv2i0rfnwl"},{"name":"选择器","_id":"cm5m2db0x000mtsnvc8ug7ioy"},{"name":"样式","_id":"cm5m2db0x000otsnv6pbpecya"},{"name":"JavaScript","_id":"cm5m2db0x000ptsnvd4034kwa"},{"name":"对象排序","_id":"cm5m2db0y000stsnvhtsv9npi"},{"name":"无序性","_id":"cm5m2db0y000utsnva7ux3ysx"},{"name":"ES6","_id":"cm5m2db0y000vtsnv4uq2h54m"},{"name":"前端开发","_id":"cm5m2db0y000wtsnvedry03am"}]}}